/**
 * SessionPlanCustomizeDialog Component
 * Story 5.3 Task 7.6
 *
 * Modal for customizing session plan parameters:
 * - Duration adjustment (30-120 minutes)
 * - Intensity selection (LOW/MEDIUM/HIGH)
 * - Content type preferences
 * - Break frequency and duration
 */

'use client'

import { useState, useEffect } from 'react'
import { Clock, Brain, Coffee, Zap, BookOpen, CheckCircle, X } from 'lucide-react'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { Slider } from '@/components/ui/slider'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { Checkbox } from '@/components/ui/checkbox'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'

interface SessionPlan {
  id: string
  startTime: string
  endTime: string
  duration: number
  intensity: 'LOW' | 'MEDIUM' | 'HIGH'
  contentSequence: {
    sequence: Array<{
      type: 'flashcard' | 'new_flashcard' | 'validation' | 'clinical' | 'lecture' | 'break'
      id: string | null
      duration: number
      phase: 'warmup' | 'peak' | 'winddown'
      difficulty?: number
    }>
    totalDuration: number
    phases: {
      warmUp: number
      peak: number
      windDown: number
    }
  }
  breaks: {
    breakIntervals: number[]
    breakDurations: number[]
    totalBreakTime: number
    reasoning: string
  }
  confidence: number
}

interface Props {
  open: boolean
  onOpenChange: (open: boolean) => void
  currentPlan: SessionPlan
  onSave: (customPlan: Partial<SessionPlan>) => void
}

export function SessionPlanCustomizeDialog({ open, onOpenChange, currentPlan, onSave }: Props) {
  const [duration, setDuration] = useState(currentPlan.duration)
  const [intensity, setIntensity] = useState<'LOW' | 'MEDIUM' | 'HIGH'>(currentPlan.intensity)
  const [contentTypes, setContentTypes] = useState({
    flashcard: true,
    validation: true,
    clinical: true,
    lecture: true,
  })
  const [breakFrequency, setBreakFrequency] = useState('25') // minutes
  const [breakDuration, setBreakDuration] = useState('5') // minutes

  useEffect(() => {
    if (currentPlan) {
      setDuration(currentPlan.duration)
      setIntensity(currentPlan.intensity)
      if (currentPlan.breaks.breakIntervals.length > 0) {
        setBreakFrequency(currentPlan.breaks.breakIntervals[0].toString())
        setBreakDuration(currentPlan.breaks.breakDurations[0].toString())
      }
    }
  }, [currentPlan])

  const handleSave = () => {
    // Calculate new break intervals based on frequency
    const breakCount = Math.floor(duration / parseInt(breakFrequency))
    const breakIntervals = Array.from({ length: breakCount }, (_, i) => (i + 1) * parseInt(breakFrequency))
    const breakDurations = Array(breakCount).fill(parseInt(breakDuration))

    const customPlan: Partial<SessionPlan> = {
      duration,
      intensity,
      breaks: {
        breakIntervals,
        breakDurations,
        totalBreakTime: breakCount * parseInt(breakDuration),
        reasoning: `Customized: ${breakFrequency}-min intervals with ${breakDuration}-min breaks`,
      },
      // Note: Content sequence would be regenerated by backend
    }

    onSave(customPlan)
  }

  const handleReset = () => {
    setDuration(currentPlan.duration)
    setIntensity(currentPlan.intensity)
    setContentTypes({
      flashcard: true,
      validation: true,
      clinical: true,
      lecture: true,
    })
    setBreakFrequency('25')
    setBreakDuration('5')
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="bg-card  border-border shadow-none max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="font-heading text-2xl flex items-center gap-2">
            <Zap className="size-6" style={{ color: 'oklch(0.7 0.15 230)' }} />
            Customize Session Plan
          </DialogTitle>
          <DialogDescription>
            Adjust your study session parameters to match your preferences and current energy level
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 py-4">
          {/* Duration Adjustment */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label className="text-base font-semibold flex items-center gap-2">
                <Clock className="size-4" style={{ color: 'oklch(0.6 0.05 230)' }} />
                Session Duration
              </Label>
              <Badge variant="outline" className="text-base font-semibold">
                {duration} min
              </Badge>
            </div>
            <Slider
              value={[duration]}
              onValueChange={(values) => setDuration(values[0])}
              min={30}
              max={120}
              step={5}
              className="w-full"
            />
            <div className="flex justify-between text-xs text-muted-foreground">
              <span>30 min</span>
              <span>Recommended: {currentPlan.duration} min</span>
              <span>120 min</span>
            </div>
          </div>

          {/* Intensity Selection */}
          <div className="space-y-3">
            <Label className="text-base font-semibold flex items-center gap-2">
              <Brain className="size-4" style={{ color: 'oklch(0.6 0.05 230)' }} />
              Study Intensity
            </Label>
            <RadioGroup
              value={intensity}
              onValueChange={(value) => {
                // Type-safe intensity value setting
                if (value === 'LOW' || value === 'MEDIUM' || value === 'HIGH') {
                  setIntensity(value)
                }
              }}
            >
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                <label
                  htmlFor="intensity-low"
                  className={`flex items-start gap-3 p-4 rounded-lg border-2 cursor-pointer transition-all ${
                    intensity === 'LOW'
                      ? 'border-[oklch(0.7_0.12_145)] bg-[oklch(0.7_0.12_145)]/5'
                      : 'border-[oklch(0.9_0.02_230)] hover:border-[oklch(0.7_0.12_145)]/50'
                  }`}
                >
                  <RadioGroupItem value="LOW" id="intensity-low" className="mt-1" />
                  <div className="flex-1 min-w-0">
                    <p className="font-semibold text-sm mb-1">Light Session</p>
                    <p className="text-xs text-muted-foreground">
                      Mostly review, easier content, frequent breaks
                    </p>
                  </div>
                </label>

                <label
                  htmlFor="intensity-medium"
                  className={`flex items-start gap-3 p-4 rounded-lg border-2 cursor-pointer transition-all ${
                    intensity === 'MEDIUM'
                      ? 'border-[oklch(0.8_0.15_85)] bg-[oklch(0.8_0.15_85)]/5'
                      : 'border-[oklch(0.9_0.02_230)] hover:border-[oklch(0.8_0.15_85)]/50'
                  }`}
                >
                  <RadioGroupItem value="MEDIUM" id="intensity-medium" className="mt-1" />
                  <div className="flex-1 min-w-0">
                    <p className="font-semibold text-sm mb-1">Balanced Challenge</p>
                    <p className="text-xs text-muted-foreground">
                      Mix of new and review, moderate difficulty
                    </p>
                  </div>
                </label>

                <label
                  htmlFor="intensity-high"
                  className={`flex items-start gap-3 p-4 rounded-lg border-2 cursor-pointer transition-all ${
                    intensity === 'HIGH'
                      ? 'border-[oklch(0.6_0.15_25)] bg-[oklch(0.6_0.15_25)]/5'
                      : 'border-[oklch(0.9_0.02_230)] hover:border-[oklch(0.6_0.15_25)]/50'
                  }`}
                >
                  <RadioGroupItem value="HIGH" id="intensity-high" className="mt-1" />
                  <div className="flex-1 min-w-0">
                    <p className="font-semibold text-sm mb-1">Reduced Intensity</p>
                    <p className="text-xs text-muted-foreground">
                      Lighter load due to fatigue signals
                    </p>
                  </div>
                </label>
              </div>
            </RadioGroup>
          </div>

          {/* Content Type Preferences */}
          <div className="space-y-3">
            <Label className="text-base font-semibold flex items-center gap-2">
              <BookOpen className="size-4" style={{ color: 'oklch(0.6 0.05 230)' }} />
              Content Types to Include
            </Label>
            <div className="grid grid-cols-2 gap-3">
              {Object.entries(contentTypes).map(([type, enabled]) => (
                <label
                  key={type}
                  className="flex items-center gap-3 p-3 rounded-lg border transition-all cursor-pointer hover:bg-card"
                  style={{
                    borderColor: enabled ? 'oklch(0.7 0.12 145)' : 'oklch(0.9 0.02 230)',
                    backgroundColor: enabled ? 'oklch(0.7 0.12 145)/0.05' : 'transparent',
                  }}
                >
                  <Checkbox
                    checked={enabled}
                    onCheckedChange={(checked) =>
                      setContentTypes((prev) => ({ ...prev, [type]: checked as boolean }))
                    }
                  />
                  <span className="text-sm font-medium capitalize">{type}s</span>
                </label>
              ))}
            </div>
          </div>

          {/* Break Configuration */}
          <div className="space-y-3">
            <Label className="text-base font-semibold flex items-center gap-2">
              <Coffee className="size-4" style={{ color: 'oklch(0.6 0.05 230)' }} />
              Break Schedule
            </Label>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="break-frequency" className="text-sm text-muted-foreground">
                  Break Every
                </Label>
                <Select value={breakFrequency} onValueChange={setBreakFrequency}>
                  <SelectTrigger id="break-frequency">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="20">20 minutes</SelectItem>
                    <SelectItem value="25">25 minutes</SelectItem>
                    <SelectItem value="30">30 minutes</SelectItem>
                    <SelectItem value="45">45 minutes</SelectItem>
                    <SelectItem value="60">60 minutes</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="break-duration" className="text-sm text-muted-foreground">
                  Break Duration
                </Label>
                <Select value={breakDuration} onValueChange={setBreakDuration}>
                  <SelectTrigger id="break-duration">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5 minutes</SelectItem>
                    <SelectItem value="10">10 minutes</SelectItem>
                    <SelectItem value="15">15 minutes</SelectItem>
                    <SelectItem value="20">20 minutes</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div
              className="p-3 rounded-lg text-xs text-muted-foreground"
              style={{ backgroundColor: 'oklch(0.95 0.01 230)' }}
            >
              <p>
                <strong>Breaks planned:</strong> {Math.floor(duration / parseInt(breakFrequency))} breaks (
                {Math.floor(duration / parseInt(breakFrequency)) * parseInt(breakDuration)} min total)
              </p>
            </div>
          </div>

          {/* Preview Summary */}
          <div
            className="p-4 rounded-lg border space-y-2"
            style={{
              backgroundColor: 'oklch(0.7 0.15 230)/0.05',
              borderColor: 'oklch(0.7 0.15 230)/0.2',
            }}
          >
            <p className="text-sm font-semibold flex items-center gap-2">
              <CheckCircle className="size-4" style={{ color: 'oklch(0.7 0.15 230)' }} />
              Customized Session Preview
            </p>
            <div className="grid grid-cols-2 gap-2 text-xs text-muted-foreground">
              <p>
                <strong>Duration:</strong> {duration} minutes
              </p>
              <p>
                <strong>Intensity:</strong> {intensity}
              </p>
              <p>
                <strong>Breaks:</strong> {Math.floor(duration / parseInt(breakFrequency))} ×{' '}
                {breakDuration} min
              </p>
              <p>
                <strong>Content Types:</strong> {Object.values(contentTypes).filter(Boolean).length}/4
              </p>
            </div>
          </div>
        </div>

        <DialogFooter className="flex items-center gap-2">
          <Button variant="outline" onClick={handleReset} className="mr-auto">
            <X className="size-4 mr-2" />
            Reset to Default
          </Button>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button
            onClick={handleSave}
            style={{
              backgroundColor: 'oklch(0.7 0.12 145)',
              color: 'white',
            }}
          >
            <CheckCircle className="size-4 mr-2" />
            Save Customization
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
