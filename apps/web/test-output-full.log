
> @americano/web@0.1.0 test /Users/kyin/Projects/Americano-epic5/apps/web
> jest

 ⚠ Warning: Next.js inferred your workspace root, but it may not be correct.
 We detected multiple lockfiles and selected the directory of /Users/kyin/pnpm-lock.yaml as the root directory.
 To silence this warning, set `outputFileTracingRoot` in your Next.js config, or consider removing one of the lockfiles if it's not needed.
   See https://nextjs.org/docs/app/api-reference/config/next-config-js/output#caveats for more information.
 Detected additional lockfiles: 
   * /Users/kyin/Projects/Americano-epic5/apps/web/pnpm-lock.yaml
   * /Users/kyin/Projects/Americano-epic5/package-lock.json

FAIL src/__tests__/smoke.test.ts
  ● Jest Configuration Smoke Test › should support jest-dom matchers

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      40 |   it('should support jest-dom matchers', () => {
      41 |     // jest-dom matchers should be available via setupFilesAfterEnv
    > 42 |     expect(document.createElement('div')).toBeInTheDocument
         |            ^
      43 |   })
      44 | })
      45 |

      at Object.document (src/__tests__/smoke.test.ts:42:12)

  ● Test Environment Verification › should have jsdom environment

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      83 | describe('Test Environment Verification', () => {
      84 |   it('should have jsdom environment', () => {
    > 85 |     expect(document).toBeDefined()
         |            ^
      86 |     expect(window).toBeDefined()
      87 |     expect(navigator).toBeDefined()
      88 |   })

      at Object.document (src/__tests__/smoke.test.ts:85:12)

  ● Test Environment Verification › should have document API available

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      89 |
      90 |   it('should have document API available', () => {
    > 91 |     const div = document.createElement('div')
         |                 ^
      92 |     div.textContent = 'test'
      93 |     expect(div.textContent).toBe('test')
      94 |   })

      at Object.document (src/__tests__/smoke.test.ts:91:17)

  ● Test Environment Verification › should have localStorage available

    ReferenceError: localStorage is not defined

       95 |
       96 |   it('should have localStorage available', () => {
    >  97 |     expect(localStorage).toBeDefined()
          |            ^
       98 |     localStorage.setItem('test', 'value')
       99 |     expect(localStorage.getItem('test')).toBe('value')
      100 |     localStorage.removeItem('test')

      at Object.localStorage (src/__tests__/smoke.test.ts:97:12)

FAIL src/subsystems/__tests__/struggle-feature-extraction.test.ts
  ● StruggleFeatureExtractor › Feature Extraction Accuracy (13.2) › Strong Objective (Anatomy - 85% retention) › should calculate low weakness score for strong objective

    expect(received).toBe(expected) // Object.is equality

    Expected: 0.15
    Received: 0.15000000000000002

      61 |       it('should calculate low weakness score for strong objective', () => {
      62 |         const weaknessScore = 1 - 0.85 // Inverse of retention
    > 63 |         expect(weaknessScore).toBe(0.15)
         |                               ^
      64 |         expect(weaknessScore).toBeLessThan(0.3) // Strong area
      65 |       })
      66 |

      at Object.toBe (src/subsystems/__tests__/struggle-feature-extraction.test.ts:63:31)

  ● StruggleFeatureExtractor › Feature Extraction Accuracy (13.2) › Weak Objective (Physiology - 30% retention) › should identify complexity mismatch for weak student

    expect(received).toBe(expected) // Object.is equality

    Expected: 0.6
    Received: 0.6000000000000001

      141 |         const complexityMismatch = Math.max(0, contentComplexity - userAbilityLevel)
      142 |
    > 143 |         expect(complexityMismatch).toBe(0.6)
          |                                    ^
      144 |         expect(complexityMismatch).toBeGreaterThan(0.5) // Significant mismatch
      145 |       })
      146 |

      at Object.toBe (src/subsystems/__tests__/struggle-feature-extraction.test.ts:143:36)

  ● StruggleFeatureExtractor › Edge Cases › should handle user with insufficient data (<4 weeks)

    expect(received).toBeLessThan(expected)

    Expected: < 0.5
    Received:   0.5

      437 |       const dataQuality = Math.min(daysOfData / 28, 1.0)
      438 |
    > 439 |       expect(dataQuality).toBeLessThan(0.5)
          |                           ^
      440 |     })
      441 |
      442 |     it('should handle objective with no review history', () => {

      at Object.toBeLessThan (src/subsystems/__tests__/struggle-feature-extraction.test.ts:439:27)

FAIL src/__tests__/components/smoke.test.tsx
  ● React Testing Library Smoke Test › should render a component

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:23:11)

  ● React Testing Library Smoke Test › should support role queries

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:30:11)

  ● React Testing Library Smoke Test › should support jest-dom matchers

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:40:11)

  ● React Testing Library Smoke Test › should handle component updates

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:48:32)

  ● React Testing Library Smoke Test › should support async queries

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:61:11)

  ● Component Accessibility Testing › should verify accessible elements

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:70:11)

FAIL src/__tests__/integration/feedback-loop.test.ts
  ● Mission Feedback Loop Integration › Adaptation Triggers from Feedback › should combine feedback with completion data for recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      285 |       // Should detect HIGH_COMPLETION (>90%)
      286 |       const hasHighCompletion = patterns.patterns.some((p) => p.type === 'HIGH_COMPLETION')
    > 287 |       expect(hasHighCompletion).toBe(true)
          |                                 ^
      288 |
      289 |       // Combined with pace feedback, should recommend increasing complexity
      290 |     })

      at Object.toBe (src/__tests__/integration/feedback-loop.test.ts:287:33)

FAIL __tests__/subsystems/behavioral-analytics/personalization-engine.test.ts
  ● PersonalizationEngine › aggregateInsights › should filter predictions by minimum confidence threshold

    expect(received).toBeNull()

    Received: {"activePredictions": [{"confidence": 0.65, "id": "pred-1", "indicators": [], "probability": undefined, "topicId": undefined}], "interventions": []}

      179 |       const insights = await engine.aggregateInsights(testUserId)
      180 |
    > 181 |       expect(insights.predictions).toBeNull()
          |                                    ^
      182 |     })
      183 |
      184 |     it('should calculate cognitive load level correctly', async () => {

      at Object.toBeNull (__tests__/subsystems/behavioral-analytics/personalization-engine.test.ts:181:36)

  ● PersonalizationEngine › applyPersonalization - Mission Context › should use optimal session duration from patterns

    expect(received).toContain(expected) // indexOf

    Expected value: "Session duration set to optimal 60 minutes"
    Received array: ["Personalization confidence: 80% (1/4 data sources available)", "Session duration set to optimal 60 minutes (confidence: 85%)"]

      364 |
      365 |       expect(config.missionPersonalization.recommendedDuration).toBe(60)
    > 366 |       expect(config.reasoning).toContain('Session duration set to optimal 60 minutes')
          |                                ^
      367 |     })
      368 |   })
      369 |

      at Object.toContain (__tests__/subsystems/behavioral-analytics/personalization-engine.test.ts:366:32)

  ● PersonalizationEngine › applyPersonalization - Content Context › should adjust review frequency based on forgetting curve

    expect(received).toContain(expected) // indexOf

    Expected value: "Review frequency adjusted based on personal forgetting curve"
    Received array: ["Personalization confidence: 80% (1/4 data sources available)", "Content adapted for visual learning preference", "Review frequency adjusted based on personal forgetting curve (half-life: 2.8 days)"]

      483 |
      484 |       expect(config.contentPersonalization.reviewFrequency).toBeGreaterThan(30) // High frequency for steep curve
    > 485 |       expect(config.reasoning).toContain(
          |                                ^
      486 |         'Review frequency adjusted based on personal forgetting curve',
      487 |       )
      488 |     })

      at Object.toContain (__tests__/subsystems/behavioral-analytics/personalization-engine.test.ts:485:32)

FAIL __tests__/api/analytics/predictions.test.ts
  ● GET /api/analytics/predictions › Error Cases › should handle 503 service unavailable

    expect(received).toBe(expected) // Object.is equality

    Expected: "ML service unavailable"
    Received: undefined

      90 |
      91 |       expect(response.status).toBe(503)
    > 92 |       expect(data.error).toBe('ML service unavailable')
         |                          ^
      93 |     })
      94 |
      95 |     it('should handle network errors gracefully', async () => {

      at Object.toBe (__tests__/api/analytics/predictions.test.ts:92:26)

  ● GET /api/analytics/predictions › Error Cases › should handle network errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 200

      103 |       const data = await response.json()
      104 |
    > 105 |       expect(response.status).toBe(503)
          |                               ^
      106 |       expect(data.error).toBe('ML service unavailable')
      107 |       expect(data.detail).toBeDefined()
      108 |

      at Object.toBe (__tests__/api/analytics/predictions.test.ts:105:31)

FAIL src/__tests__/lib/mission-analytics.test.ts
  ● MissionAnalyticsEngine › detectPerformanceCorrelation › should calculate high confidence with sufficient data

    expect(received).toBe(expected) // Object.is equality

    Expected: "HIGH"
    Received: "LOW"

      300 |
      301 |       expect(result.sampleSize).toBe(30)
    > 302 |       expect(result.confidence).toBe('HIGH')
          |                                 ^
      303 |       expect(result.pValue).toBeLessThan(0.01)
      304 |     })
      305 |

      at Object.toBe (src/__tests__/lib/mission-analytics.test.ts:302:33)

  ● MissionAnalyticsEngine › detectPerformanceCorrelation › should generate appropriate insights for strong correlation

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      323 |       const result = await engine.detectPerformanceCorrelation('user1')
      324 |
    > 325 |       expect(result.correlationCoefficient).toBeGreaterThan(0)
          |                                             ^
      326 |       expect(result.insight).toBeTruthy()
      327 |       expect(result.insight.length).toBeGreaterThan(0)
      328 |     })

      at Object.toBeGreaterThan (src/__tests__/lib/mission-analytics.test.ts:325:45)

  ● MissionAnalyticsEngine › recommendMissionAdjustments › should recommend reducing duration for low completion

    expect(received).toBeDefined()

    Received: undefined

      342 |       const result = await engine.recommendMissionAdjustments('user1')
      343 |
    > 344 |       expect(result.adjustments.duration).toBeDefined()
          |                                           ^
      345 |       expect(result.adjustments.duration?.current).toBe(60)
      346 |       expect(result.adjustments.duration?.recommended).toBe(51) // 60 * 0.85 = 51
      347 |       expect(result.adjustments.duration?.reason).toContain('below optimal')

      at Object.toBeDefined (src/__tests__/lib/mission-analytics.test.ts:344:43)

  ● MissionAnalyticsEngine › recommendMissionAdjustments › should not recommend adjustments for optimal completion rate

    expect(received).toBeUndefined()

    Received: {"current": "MODERATE", "reason": "Completion rate 100.0% is above optimal 70-90% range. Increase challenge for better engagement.", "recommended": "CHALLENGING"}

      417 |       // Should not recommend duration or complexity changes
      418 |       expect(result.adjustments.duration).toBeUndefined()
    > 419 |       expect(result.adjustments.complexity).toBeUndefined()
          |                                             ^
      420 |     })
      421 |   })
      422 |

      at Object.toBeUndefined (src/__tests__/lib/mission-analytics.test.ts:419:45)

FAIL __tests__/api/analytics/interventions.test.ts
  ● GET /api/analytics/interventions › Success Cases › should return active interventions

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      18 |       const data = await response.json()
      19 |
    > 20 |       expect(response.status).toBe(200)
         |                               ^
      21 |       expect(data.success).toBe(true)
      22 |       expect(data.interventions).toHaveLength(2)
      23 |       expect(data.count).toBe(2)

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:20:31)

  ● GET /api/analytics/interventions › Success Cases › should return interventions with correct structure

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      30 |       const data = await response.json()
      31 |
    > 32 |       expect(response.status).toBe(200)
         |                               ^
      33 |       expect(data.interventions[0]).toMatchObject({
      34 |         id: expect.any(String),
      35 |         predictionId: expect.any(String),

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:32:31)

  ● GET /api/analytics/interventions › Success Cases › should pass userId query parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      52 |       const data = await response.json()
      53 |
    > 54 |       expect(response.status).toBe(200)
         |                               ^
      55 |       expect(data.success).toBe(true)
      56 |     })
      57 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:54:31)

  ● GET /api/analytics/interventions › Success Cases › should handle empty intervention list

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      63 |       const response = await GET(request)
      64 |
    > 65 |       expect(response.status).toBe(200)
         |                               ^
      66 |     })
      67 |   })
      68 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:65:31)

  ● GET /api/analytics/interventions › Error Cases › should handle 404 not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 503

      76 |       const data = await response.json()
      77 |
    > 78 |       expect(response.status).toBe(404)
         |                               ^
      79 |       expect(data.detail).toBe('No interventions found')
      80 |     })
      81 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:78:31)

  ● GET /api/analytics/interventions › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      88 |       const data = await response.json()
      89 |
    > 90 |       expect(response.status).toBe(500)
         |                               ^
      91 |       expect(data.detail).toBe('Failed to fetch interventions')
      92 |     })
      93 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:90:31)

  ● GET /api/analytics/interventions › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      128 |       const response = await GET(request)
      129 |
    > 130 |       expect(response.status).toBe(200)
          |                               ^
      131 |     })
      132 |
      133 |     it('should handle concurrent requests', async () => {

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:130:31)

  ● GET /api/analytics/interventions › Edge Cases › should handle concurrent requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      139 |
      140 |       responses.forEach((response) => {
    > 141 |         expect(response.status).toBe(200)
          |                                 ^
      142 |       })
      143 |     })
      144 |

      at toBe (__tests__/api/analytics/interventions.test.ts:141:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (__tests__/api/analytics/interventions.test.ts:140:17)

  ● GET /api/analytics/interventions › Edge Cases › should validate intervention types

    TypeError: Cannot read properties of undefined (reading 'forEach')

      158 |       ]
      159 |
    > 160 |       data.interventions.forEach((intervention: { interventionType: string }) => {
          |                          ^
      161 |         expect(validTypes).toContain(intervention.interventionType)
      162 |       })
      163 |     })

      at Object.forEach (__tests__/api/analytics/interventions.test.ts:160:26)

FAIL __tests__/api/analytics/predictions-generate.test.ts
  ● POST /api/analytics/predictions/generate › Success Cases › should generate predictions for user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      24 |       const data = await response.json()
      25 |
    > 26 |       expect(response.status).toBe(200)
         |                               ^
      27 |       expect(data.success).toBe(true)
      28 |       expect(data.predictions).toBeDefined()
      29 |       expect(Array.isArray(data.predictions)).toBe(true)

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:26:31)

  ● POST /api/analytics/predictions/generate › Success Cases › should use default daysAhead when not provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      43 |       const data = await response.json()
      44 |
    > 45 |       expect(response.status).toBe(200)
         |                               ^
      46 |       expect(data.success).toBe(true)
      47 |     })
      48 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:45:31)

  ● POST /api/analytics/predictions/generate › Success Cases › should return predictions with correct structure

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      59 |       const data = await response.json()
      60 |
    > 61 |       expect(response.status).toBe(200)
         |                               ^
      62 |       expect(data.predictions[0]).toMatchObject({
      63 |         id: expect.any(String),
      64 |         userId: expect.any(String),

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:61:31)

  ● POST /api/analytics/predictions/generate › Error Cases › should handle 400 bad request from FastAPI

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 503

      82 |       const data = await response.json()
      83 |
    > 84 |       expect(response.status).toBe(400)
         |                               ^
      85 |       expect(data.detail).toBe('Invalid request body')
      86 |     })
      87 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:84:31)

  ● POST /api/analytics/predictions/generate › Error Cases › should handle 422 validation error

    expect(received).toBe(expected) // Object.is equality

    Expected: 422
    Received: 503

      104 |       const data = await response.json()
      105 |
    > 106 |       expect(response.status).toBe(422)
          |                               ^
      107 |       expect(data.detail).toContain('Validation error')
      108 |     })
      109 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:106:31)

  ● POST /api/analytics/predictions/generate › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      128 |       const data = await response.json()
      129 |
    > 130 |       expect(response.status).toBe(500)
          |                               ^
      131 |       expect(data.detail).toBe('Internal prediction engine error')
      132 |     })
      133 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:130:31)

  ● POST /api/analytics/predictions/generate › Edge Cases › should handle daysAhead boundary values

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      200 |
      201 |         const response = await POST(request)
    > 202 |         expect(response.status).toBe(200)
          |                                 ^
      203 |       }
      204 |     })
      205 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:202:33)

  ● POST /api/analytics/predictions/generate › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      214 |
      215 |       const response = await POST(request)
    > 216 |       expect(response.status).toBe(200)
          |                               ^
      217 |     })
      218 |
      219 |     it('should handle large daysAhead values', async () => {

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:216:31)

  ● POST /api/analytics/predictions/generate › Edge Cases › should handle large daysAhead values

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      227 |
      228 |       const response = await POST(request)
    > 229 |       expect(response.status).toBe(200)
          |                               ^
      230 |     })
      231 |   })
      232 | })

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:229:31)

FAIL src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts
  ● GET /api/analytics/behavioral-insights/correlation › Query Parameter Validation › should accept valid weeks parameter (8-52)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

       97 |       const data = await response.json()
       98 |
    >  99 |       expect(response.status).toBe(200)
          |                               ^
      100 |       expect(data.success).toBe(true)
      101 |     })
      102 |

      at Object.toBe (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:99:31)

  ● GET /api/analytics/behavioral-insights/correlation › Query Parameter Validation › should use default weeks=12 when not specified

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      109 |       const data = await response.json()
      110 |
    > 111 |       expect(response.status).toBe(200)
          |                               ^
      112 |       expect(data.success).toBe(true)
      113 |     })
      114 |

      at Object.toBe (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:111:31)

  ● GET /api/analytics/behavioral-insights/correlation › Query Parameter Validation › should accept metric parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      121 |       const data = await response.json()
      122 |
    > 123 |       expect(response.status).toBe(200)
          |                               ^
      124 |       expect(data.success).toBe(true)
      125 |     })
      126 |   })

      at Object.toBe (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:123:31)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should return Pearson correlation coefficient in valid range [-1, 1]

    TypeError: Cannot read properties of undefined (reading 'coefficient')

      135 |       const data = await response.json()
      136 |
    > 137 |       expect(data.data.coefficient).toBeGreaterThanOrEqual(-1)
          |                        ^
      138 |       expect(data.data.coefficient).toBeLessThanOrEqual(1)
      139 |       expect(typeof data.data.coefficient).toBe('number')
      140 |     })

      at Object.coefficient (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:137:24)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should return p-value in valid range [0, 1]

    TypeError: Cannot read properties of undefined (reading 'pValue')

      148 |       const data = await response.json()
      149 |
    > 150 |       expect(data.data.pValue).toBeGreaterThanOrEqual(0)
          |                        ^
      151 |       expect(data.data.pValue).toBeLessThanOrEqual(1)
      152 |       expect(typeof data.data.pValue).toBe('number')
      153 |     })

      at Object.pValue (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:150:24)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should return 95% confidence interval with valid bounds

    TypeError: Cannot read properties of undefined (reading 'confidenceInterval')

      161 |       const data = await response.json()
      162 |
    > 163 |       const [lower, upper] = data.data.confidenceInterval
          |                                        ^
      164 |
      165 |       expect(lower).toBeGreaterThanOrEqual(-1)
      166 |       expect(upper).toBeLessThanOrEqual(1)

      at Object.confidenceInterval (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:163:40)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should include interpretation string

    TypeError: Cannot read properties of undefined (reading 'interpretation')

      178 |       const data = await response.json()
      179 |
    > 180 |       expect(typeof data.data.interpretation).toBe('string')
          |                               ^
      181 |       expect(data.data.interpretation.length).toBeGreaterThan(0)
      182 |       expect(data.data.interpretation).toContain('p=')
      183 |     })

      at Object.interpretation (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:180:31)

  ● GET /api/analytics/behavioral-insights/correlation › Time Series Data Validation › should return time series data with correct structure

    TypeError: Cannot read properties of undefined (reading 'timeSeriesData')

      193 |       const data = await response.json()
      194 |
    > 195 |       expect(data.data.timeSeriesData).toBeDefined()
          |                        ^
      196 |       expect(Array.isArray(data.data.timeSeriesData)).toBe(true)
      197 |       expect(data.data.timeSeriesData.length).toBeGreaterThan(0)
      198 |

      at Object.timeSeriesData (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:195:24)

  ● GET /api/analytics/behavioral-insights/correlation › Time Series Data Validation › should validate behavioral scores are in range [0, 100]

    TypeError: Cannot read properties of undefined (reading 'timeSeriesData')

      211 |       const data = await response.json()
      212 |
    > 213 |       data.data.timeSeriesData.forEach((point: any) => {
          |                 ^
      214 |         expect(point.behavioralScore).toBeGreaterThanOrEqual(0)
      215 |         expect(point.behavioralScore).toBeLessThanOrEqual(100)
      216 |       })

      at Object.timeSeriesData (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:213:17)

  ● GET /api/analytics/behavioral-insights/correlation › Time Series Data Validation › should validate academic scores are in range [0, 100]

    TypeError: Cannot read properties of undefined (reading 'timeSeriesData')

      225 |       const data = await response.json()
      226 |
    > 227 |       data.data.timeSeriesData.forEach((point: any) => {
          |                 ^
      228 |         expect(point.academicScore).toBeGreaterThanOrEqual(0)
      229 |         expect(point.academicScore).toBeLessThanOrEqual(100)
      230 |       })

      at Object.timeSeriesData (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:227:17)

  ● GET /api/analytics/behavioral-insights/correlation › Insights and Causation Warnings › should always include causation warning

    TypeError: Cannot read properties of undefined (reading 'insights')

      241 |       const data = await response.json()
      242 |
    > 243 |       expect(data.data.insights).toBeDefined()
          |                        ^
      244 |       expect(Array.isArray(data.data.insights)).toBe(true)
      245 |       expect(data.data.insights.length).toBeGreaterThan(0)
      246 |

      at Object.insights (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:243:24)

  ● GET /api/analytics/behavioral-insights/correlation › Insights and Causation Warnings › should include statistical significance insight

    TypeError: Cannot read properties of undefined (reading 'insights')

      259 |       const data = await response.json()
      260 |
    > 261 |       const hasSignificance = data.data.insights.some((insight: string) =>
          |                                         ^
      262 |         insight.toLowerCase().includes('statistically significant'),
      263 |       )
      264 |       expect(hasSignificance).toBe(true)

      at Object.insights (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:261:41)

  ● GET /api/analytics/behavioral-insights/correlation › Insights and Causation Warnings › should provide actionable insights

    TypeError: Cannot read properties of undefined (reading 'insights')

      273 |       const data = await response.json()
      274 |
    > 275 |       expect(data.data.insights.length).toBeGreaterThanOrEqual(3)
          |                        ^
      276 |     })
      277 |   })
      278 |

      at Object.insights (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:275:24)

  ● GET /api/analytics/behavioral-insights/correlation › Data Quality Metrics › should return data quality metrics

    TypeError: Cannot read properties of undefined (reading 'dataQuality')

      286 |       const data = await response.json()
      287 |
    > 288 |       expect(data.data.dataQuality).toBeDefined()
          |                        ^
      289 |       expect(data.data.dataQuality).toHaveProperty('sampleSize')
      290 |       expect(data.data.dataQuality).toHaveProperty('weeksOfData')
      291 |       expect(data.data.dataQuality).toHaveProperty('missingDataPoints')

      at Object.dataQuality (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:288:24)

  ● GET /api/analytics/behavioral-insights/correlation › Data Quality Metrics › should validate sample size matches time series data length

    TypeError: Cannot read properties of undefined (reading 'dataQuality')

      300 |       const data = await response.json()
      301 |
    > 302 |       expect(data.data.dataQuality.sampleSize).toBe(data.data.timeSeriesData.length)
          |                        ^
      303 |     })
      304 |   })
      305 |

      at Object.dataQuality (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:302:24)

  ● GET /api/analytics/behavioral-insights/correlation › Response Structure › should return success response with correct structure

    expect(received).toHaveProperty(path, value)

    Expected path: "success"

    Expected value: true
    Received value: false

      313 |       const data = await response.json()
      314 |
    > 315 |       expect(data).toHaveProperty('success', true)
          |                    ^
      316 |       expect(data).toHaveProperty('data')
      317 |       expect(data.data).toHaveProperty('coefficient')
      318 |       expect(data.data).toHaveProperty('pValue')

      at Object.toHaveProperty (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:315:20)

FAIL src/__tests__/components/review-card.test.tsx
  ● ReviewCard › Basic Rendering › should render weekly review card

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      83 |   describe('Basic Rendering', () => {
      84 |     it('should render weekly review card', () => {
    > 85 |       render(<ReviewCard review={mockReview} />)
         |             ^
      86 |
      87 |       expect(screen.getByText('Weekly Review')).toBeInTheDocument()
      88 |       expect(screen.getByText('EXCELLENT')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:85:13)

  ● ReviewCard › Basic Rendering › should render monthly review card

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      91 |     it('should render monthly review card', () => {
      92 |       const monthlyReview = { ...mockReview, period: 'MONTH' as const }
    > 93 |       render(<ReviewCard review={monthlyReview} />)
         |             ^
      94 |
      95 |       expect(screen.getByText('Monthly Review')).toBeInTheDocument()
      96 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:93:13)

  ● ReviewCard › Basic Rendering › should display date range correctly

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

       97 |
       98 |     it('should display date range correctly', () => {
    >  99 |       render(<ReviewCard review={mockReview} />)
          |             ^
      100 |
      101 |       // Check for formatted date range (format may vary by locale and timezone)
      102 |       // Using flexible regex to match date patterns

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:99:13)

  ● ReviewCard › Basic Rendering › should display success rating badge

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      105 |
      106 |     it('should display success rating badge', () => {
    > 107 |       render(<ReviewCard review={mockReview} />)
          |             ^
      108 |
      109 |       const badge = screen.getByText('EXCELLENT')
      110 |       expect(badge).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:107:13)

  ● ReviewCard › Summary Stats Display › should display missions completed count

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      115 |   describe('Summary Stats Display', () => {
      116 |     it('should display missions completed count', () => {
    > 117 |       render(<ReviewCard review={mockReview} />)
          |             ^
      118 |
      119 |       expect(screen.getByText('6')).toBeInTheDocument()
      120 |       expect(screen.getByText('missions')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:117:13)

  ● ReviewCard › Summary Stats Display › should display completion rate with correct color

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      122 |
      123 |     it('should display completion rate with correct color', () => {
    > 124 |       render(<ReviewCard review={mockReview} />)
          |             ^
      125 |
      126 |       const completionRate = screen.getByText('86%') // 85.7% rounded
      127 |       expect(completionRate).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:124:13)

  ● ReviewCard › Summary Stats Display › should display study time in hours

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      131 |
      132 |     it('should display study time in hours', () => {
    > 133 |       render(<ReviewCard review={mockReview} />)
          |             ^
      134 |
      135 |       expect(screen.getByText('6h')).toBeInTheDocument()
      136 |       expect(screen.getByText('360 min total')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:133:13)

  ● ReviewCard › Summary Stats Display › should display longest streak

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      138 |
      139 |     it('should display longest streak', () => {
    > 140 |       render(<ReviewCard review={mockReview} />)
          |             ^
      141 |
      142 |       const streakElements = screen.getAllByText('5')
      143 |       expect(streakElements.length).toBeGreaterThan(0)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:140:13)

  ● ReviewCard › Success Score Ratings › should show EXCELLENT for score >= 0.8

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      149 |     it('should show EXCELLENT for score >= 0.8', () => {
      150 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.85 } }
    > 151 |       render(<ReviewCard review={review} />)
          |             ^
      152 |
      153 |       expect(screen.getByText('EXCELLENT')).toBeInTheDocument()
      154 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:151:13)

  ● ReviewCard › Success Score Ratings › should show GOOD for score 0.7-0.79

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      156 |     it('should show GOOD for score 0.7-0.79', () => {
      157 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.75 } }
    > 158 |       render(<ReviewCard review={review} />)
          |             ^
      159 |
      160 |       expect(screen.getByText('GOOD')).toBeInTheDocument()
      161 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:158:13)

  ● ReviewCard › Success Score Ratings › should show FAIR for score 0.6-0.69

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      163 |     it('should show FAIR for score 0.6-0.69', () => {
      164 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.65 } }
    > 165 |       render(<ReviewCard review={review} />)
          |             ^
      166 |
      167 |       expect(screen.getByText('FAIR')).toBeInTheDocument()
      168 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:165:13)

  ● ReviewCard › Success Score Ratings › should show NEEDS IMPROVEMENT for score 0.5-0.59

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      170 |     it('should show NEEDS IMPROVEMENT for score 0.5-0.59', () => {
      171 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.55 } }
    > 172 |       render(<ReviewCard review={review} />)
          |             ^
      173 |
      174 |       expect(screen.getByText('NEEDS IMPROVEMENT')).toBeInTheDocument()
      175 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:172:13)

  ● ReviewCard › Success Score Ratings › should show POOR for score < 0.5

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      177 |     it('should show POOR for score < 0.5', () => {
      178 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.45 } }
    > 179 |       render(<ReviewCard review={review} />)
          |             ^
      180 |
      181 |       expect(screen.getByText('POOR')).toBeInTheDocument()
      182 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:179:13)

  ● ReviewCard › Completion Rate Colors › should show green for rate >= 0.85

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      185 |   describe('Completion Rate Colors', () => {
      186 |     it('should show green for rate >= 0.85', () => {
    > 187 |       render(<ReviewCard review={mockReview} />)
          |             ^
      188 |
      189 |       const completionRate = screen.getByText('86%')
      190 |       expect(completionRate).toHaveClass('text-green-600') // >= 0.85 shows green

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:187:13)

  ● ReviewCard › Completion Rate Colors › should show yellow for rate 0.5-0.69

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      196 |         summary: { ...mockReview.summary, completionRate: 0.6 },
      197 |       }
    > 198 |       render(<ReviewCard review={review} />)
          |             ^
      199 |
      200 |       const completionRate = screen.getByText('60%')
      201 |       expect(completionRate).toHaveClass('text-yellow-600')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:198:13)

  ● ReviewCard › Completion Rate Colors › should show red for rate < 0.5

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      208 |         summary: { ...mockReview.summary, completionRate: 0.4 },
      209 |       }
    > 210 |       render(<ReviewCard review={review} />)
          |             ^
      211 |
      212 |       const completionRate = screen.getByText('40%')
      213 |       expect(completionRate).toHaveClass('text-red-600')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:210:13)

  ● ReviewCard › Completion Rate Colors › should show "Above target" for rate > 0.9

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      220 |         summary: { ...mockReview.summary, completionRate: 0.95 },
      221 |       }
    > 222 |       render(<ReviewCard review={review} />)
          |             ^
      223 |
      224 |       expect(screen.getByText('Above target')).toBeInTheDocument()
      225 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:222:13)

  ● ReviewCard › Expand/Collapse Functionality › should initially be collapsed

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      228 |   describe('Expand/Collapse Functionality', () => {
      229 |     it('should initially be collapsed', () => {
    > 230 |       render(<ReviewCard review={mockReview} />)
          |             ^
      231 |
      232 |       // Expanded content should not be visible
      233 |       expect(screen.queryByText('Highlights')).not.toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:230:13)

  ● ReviewCard › Expand/Collapse Functionality › should expand when chevron button clicked

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      235 |
      236 |     it('should expand when chevron button clicked', () => {
    > 237 |       render(<ReviewCard review={mockReview} />)
          |             ^
      238 |
      239 |       const expandButton = screen.getByRole('button')
      240 |       fireEvent.click(expandButton)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:237:13)

  ● ReviewCard › Expand/Collapse Functionality › should collapse when clicked again

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      247 |
      248 |     it('should collapse when clicked again', () => {
    > 249 |       render(<ReviewCard review={mockReview} />)
          |             ^
      250 |
      251 |       const expandButton = screen.getByRole('button')
      252 |

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:249:13)

  ● ReviewCard › Expand/Collapse Functionality › should toggle chevron icon direction

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      261 |
      262 |     it('should toggle chevron icon direction', () => {
    > 263 |       render(<ReviewCard review={mockReview} />)
          |             ^
      264 |
      265 |       const expandButton = screen.getByRole('button')
      266 |

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:263:13)

  ● ReviewCard › Highlights Section › should display personal bests

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      276 |   describe('Highlights Section', () => {
      277 |     it('should display personal bests', () => {
    > 278 |       render(<ReviewCard review={mockReview} />)
          |             ^
      279 |       fireEvent.click(screen.getByRole('button')) // Expand
      280 |
      281 |       expect(screen.getByText('Completed 6 missions in a week - new record!')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:278:13)

  ● ReviewCard › Highlights Section › should display top objectives

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      284 |
      285 |     it('should display top objectives', () => {
    > 286 |       render(<ReviewCard review={mockReview} />)
          |             ^
      287 |       fireEvent.click(screen.getByRole('button')) // Expand
      288 |
      289 |       expect(screen.getByText('Top Objectives Completed')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:286:13)

  ● ReviewCard › Highlights Section › should limit top objectives to 3

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      306 |       }
      307 |
    > 308 |       render(<ReviewCard review={reviewWithManyObjectives} />)
          |             ^
      309 |       fireEvent.click(screen.getByRole('button')) // Expand
      310 |
      311 |       expect(screen.getByText('Objective 1')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:308:13)

  ● ReviewCard › Insights Section › should display improvements with correct styling

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      318 |   describe('Insights Section', () => {
      319 |     it('should display improvements with correct styling', () => {
    > 320 |       render(<ReviewCard review={mockReview} />)
          |             ^
      321 |       fireEvent.click(screen.getByRole('button')) // Expand
      322 |
      323 |       expect(screen.getByText('Improvements')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:320:13)

  ● ReviewCard › Insights Section › should display patterns detected

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      327 |
      328 |     it('should display patterns detected', () => {
    > 329 |       render(<ReviewCard review={mockReview} />)
          |             ^
      330 |       fireEvent.click(screen.getByRole('button')) // Expand
      331 |
      332 |       expect(screen.getByText('Patterns Detected')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:329:13)

  ● ReviewCard › Insights Section › should display concerns

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      337 |
      338 |     it('should display concerns', () => {
    > 339 |       render(<ReviewCard review={mockReview} />)
          |             ^
      340 |       fireEvent.click(screen.getByRole('button')) // Expand
      341 |
      342 |       expect(screen.getByText('Areas for Attention')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:339:13)

  ● ReviewCard › Recommendations Section › should display action items with priority badges

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      347 |   describe('Recommendations Section', () => {
      348 |     it('should display action items with priority badges', () => {
    > 349 |       render(<ReviewCard review={mockReview} />)
          |             ^
      350 |       fireEvent.click(screen.getByRole('button')) // Expand
      351 |
      352 |       expect(screen.getByText('HIGH')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:349:13)

  ● ReviewCard › Recommendations Section › should display reasons for recommendations

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      357 |
      358 |     it('should display reasons for recommendations', () => {
    > 359 |       render(<ReviewCard review={mockReview} />)
          |             ^
      360 |       fireEvent.click(screen.getByRole('button')) // Expand
      361 |
      362 |       expect(screen.getByText('Your best performance occurs during this time')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:359:13)

  ● ReviewCard › Recommendations Section › should show "Apply Recommendations" button when callback provided

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      366 |     it('should show "Apply Recommendations" button when callback provided', () => {
      367 |       const onApply = jest.fn()
    > 368 |       render(<ReviewCard review={mockReview} onApplyRecommendations={onApply} />)
          |             ^
      369 |       fireEvent.click(screen.getByRole('button')) // Expand
      370 |
      371 |       const applyButton = screen.getByText('Apply Recommendations')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:368:13)

  ● ReviewCard › Recommendations Section › should call onApplyRecommendations when button clicked

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      375 |     it('should call onApplyRecommendations when button clicked', () => {
      376 |       const onApply = jest.fn()
    > 377 |       render(<ReviewCard review={mockReview} onApplyRecommendations={onApply} />)
          |             ^
      378 |
      379 |       // Expand card
      380 |       const expandButton = screen.getAllByRole('button')[0]

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:377:13)

  ● ReviewCard › Recommendations Section › should not show apply button when no callback provided

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      389 |
      390 |     it('should not show apply button when no callback provided', () => {
    > 391 |       render(<ReviewCard review={mockReview} />)
          |             ^
      392 |       fireEvent.click(screen.getByRole('button')) // Expand
      393 |
      394 |       expect(screen.queryByText('Apply Recommendations')).not.toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:391:13)

  ● ReviewCard › Review Metadata › should display generation timestamp

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      398 |   describe('Review Metadata', () => {
      399 |     it('should display generation timestamp', () => {
    > 400 |       render(<ReviewCard review={mockReview} />)
          |             ^
      401 |       fireEvent.click(screen.getByRole('button')) // Expand
      402 |
      403 |       // Check for date (format may vary by locale)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:400:13)

  ● ReviewCard › Edge Cases › should handle review with no highlights

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      418 |       }
      419 |
    > 420 |       render(<ReviewCard review={minimalReview} />)
          |             ^
      421 |       fireEvent.click(screen.getByRole('button')) // Expand
      422 |
      423 |       // Should not render highlights section

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:420:13)

  ● ReviewCard › Edge Cases › should handle review with no insights

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      436 |       }
      437 |
    > 438 |       render(<ReviewCard review={minimalReview} />)
          |             ^
      439 |       fireEvent.click(screen.getByRole('button')) // Expand
      440 |
      441 |       // Should not render insights section

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:438:13)

  ● ReviewCard › Edge Cases › should handle review with no recommendations

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      452 |       }
      453 |
    > 454 |       render(<ReviewCard review={minimalReview} />)
          |             ^
      455 |       fireEvent.click(screen.getByRole('button')) // Expand
      456 |
      457 |       // Should not render recommendations section

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:454:13)

  ● ReviewCard › Edge Cases › should handle zero values correctly

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      478 |       }
      479 |
    > 480 |       render(<ReviewCard review={zeroReview} />)
          |             ^
      481 |
      482 |       expect(screen.getByText('0h')).toBeInTheDocument()
      483 |       expect(screen.getByText('0%')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:480:13)

  ● ReviewCard › Edge Cases › should handle very long text gracefully

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      498 |       }
      499 |
    > 500 |       render(<ReviewCard review={longTextReview} />)
          |             ^
      501 |       fireEvent.click(screen.getByRole('button'))
      502 |
      503 |       // Component should render without errors

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:500:13)

  ● ReviewCard › Edge Cases › should handle invalid dates gracefully

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      514 |
      515 |       // Should not throw error
    > 516 |       render(<ReviewCard review={invalidDateReview} />)
          |             ^
      517 |       expect(screen.getByText('Weekly Review')).toBeInTheDocument()
      518 |     })
      519 |   })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:516:13)

  ● ReviewCard › Accessibility › should have proper button roles

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      521 |   describe('Accessibility', () => {
      522 |     it('should have proper button roles', () => {
    > 523 |       render(<ReviewCard review={mockReview} />)
          |             ^
      524 |
      525 |       const buttons = screen.getAllByRole('button')
      526 |       expect(buttons.length).toBeGreaterThan(0)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:523:13)

  ● ReviewCard › Accessibility › should support keyboard navigation

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      528 |
      529 |     it('should support keyboard navigation', () => {
    > 530 |       render(<ReviewCard review={mockReview} />)
          |             ^
      531 |
      532 |       const expandButton = screen.getByRole('button')
      533 |       expandButton.focus()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:530:13)

  ● ReviewCard › Accessibility › should have semantic HTML structure

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      536 |
      537 |     it('should have semantic HTML structure', () => {
    > 538 |       const { container } = render(<ReviewCard review={mockReview} />)
          |                                   ^
      539 |
      540 |       // Check for proper card structure (shadcn Card component uses specific classes)
      541 |       const cardElement = container.querySelector('.rounded-xl.border')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:538:35)

  ● ReviewCard › Responsive Design › should use responsive grid for summary stats

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      546 |   describe('Responsive Design', () => {
      547 |     it('should use responsive grid for summary stats', () => {
    > 548 |       const { container } = render(<ReviewCard review={mockReview} />)
          |                                   ^
      549 |
      550 |       const grid = container.querySelector('.grid')
      551 |       expect(grid).toHaveClass('grid-cols-2', 'md:grid-cols-4')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:548:35)

FAIL src/subsystems/behavioral-analytics/__tests__/academic-performance-integration.test.ts
  ● Test suite failed to run

    Cannot find module 'vitest' from 'src/subsystems/behavioral-analytics/__tests__/academic-performance-integration.test.ts'

       8 | import { describe, it, expect, beforeEach, vi } from 'vitest'
       9 | import { AcademicPerformanceIntegration } from '../academic-performance-integration'
    > 10 | import { prisma } from '@/lib/db'
         |                 ^
      11 |
      12 | // Mock Prisma
      13 | vi.mock('@/lib/db', () => ({

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (src/subsystems/behavioral-analytics/__tests__/academic-performance-integration.test.ts:10:17)

FAIL src/subsystems/behavioral-analytics/__tests__/ab-testing-framework.test.ts
  ● ABTestingFramework › recordMetrics › should record metrics for user assignment

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      211 |       }
      212 |
    > 213 |       ;(prisma.experimentAssignment.update as jest.Mock).mockResolvedValue({
          |                                                          ^
      214 |         userId,
      215 |         experimentId,
      216 |         metrics,

      at Object.mockResolvedValue (src/subsystems/behavioral-analytics/__tests__/ab-testing-framework.test.ts:213:58)

  ● ABTestingFramework › analyzeExperiment › should calculate confidence intervals correctly

    expect(received).toBeLessThanOrEqual(expected)

    Expected: <= 0.15
    Received:    0.15000000000000002

      429 |       // CI should contain the true difference (0.85 - 0.70 = 0.15)
      430 |       const trueDiff = 0.15
    > 431 |       expect(analysis.statistical?.confidenceInterval.lower).toBeLessThanOrEqual(trueDiff)
          |                                                              ^
      432 |       expect(analysis.statistical?.confidenceInterval.upper).toBeGreaterThanOrEqual(trueDiff)
      433 |     })
      434 |

      at Object.toBeLessThanOrEqual (src/subsystems/behavioral-analytics/__tests__/ab-testing-framework.test.ts:431:62)

FAIL src/subsystems/behavioral-analytics/__tests__/goal-manager.test.ts
  ● Test suite failed to run

    Cannot find module 'vitest' from 'src/subsystems/behavioral-analytics/__tests__/goal-manager.test.ts'

       6 | import { describe, it, expect, beforeEach, vi } from 'vitest'
       7 | import { GoalManager } from '../goal-manager'
    >  8 | import { prisma } from '@/lib/db'
         |                 ^
       9 |
      10 | // Mock Prisma
      11 | vi.mock('@/lib/db', () => ({

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (src/subsystems/behavioral-analytics/__tests__/goal-manager.test.ts:8:17)

FAIL src/subsystems/behavioral-analytics/__tests__/recommendations-engine.test.ts
  ● Test suite failed to run

    Cannot find module 'vitest' from 'src/subsystems/behavioral-analytics/__tests__/recommendations-engine.test.ts'

       6 | import { describe, it, expect, beforeEach, vi } from 'vitest'
       7 | import { RecommendationsEngine } from '../recommendations-engine'
    >  8 | import { prisma } from '@/lib/db'
         |                 ^
       9 |
      10 | // Mock Prisma
      11 | vi.mock('@/lib/db', () => ({

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (src/subsystems/behavioral-analytics/__tests__/recommendations-engine.test.ts:8:17)

FAIL __tests__/api/analytics/struggle-reduction.test.ts
  ● GET /api/analytics/struggle-reduction › Success Cases › should return struggle reduction metrics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      18 |       const data = await response.json()
      19 |
    > 20 |       expect(response.status).toBe(200)
         |                               ^
      21 |       expect(data.success).toBe(true)
      22 |       expect(data.baselineRate).toBeDefined()
      23 |       expect(data.currentRate).toBeDefined()

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:20:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should return metrics with correct data types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      33 |       const data = await response.json()
      34 |
    > 35 |       expect(response.status).toBe(200)
         |                               ^
      36 |       expect(typeof data.baselineRate).toBe('number')
      37 |       expect(typeof data.currentRate).toBe('number')
      38 |       expect(typeof data.reductionPercentage).toBe('number')

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:35:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should include timeline data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      47 |       const data = await response.json()
      48 |
    > 49 |       expect(response.status).toBe(200)
         |                               ^
      50 |       expect(data.timeline.length).toBeGreaterThan(0)
      51 |       expect(data.timeline[0]).toHaveProperty('week')
      52 |       expect(data.timeline[0]).toHaveProperty('struggleRate')

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:49:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should include intervention effectiveness data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      59 |       const data = await response.json()
      60 |
    > 61 |       expect(response.status).toBe(200)
         |                               ^
      62 |       expect(data.interventionEffectiveness.length).toBeGreaterThan(0)
      63 |       expect(data.interventionEffectiveness[0]).toHaveProperty('type')
      64 |       expect(data.interventionEffectiveness[0]).toHaveProperty('applicationsCount')

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:61:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should handle period query parameter - week

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      74 |       const data = await response.json()
      75 |
    > 76 |       expect(response.status).toBe(200)
         |                               ^
      77 |       expect(data.success).toBe(true)
      78 |       expect(data.period).toBe('week')
      79 |     })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:76:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should handle period query parameter - month

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      87 |       const data = await response.json()
      88 |
    > 89 |       expect(response.status).toBe(200)
         |                               ^
      90 |       expect(data.period).toBe('month')
      91 |     })
      92 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:89:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should handle period query parameter - all

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

       99 |       const data = await response.json()
      100 |
    > 101 |       expect(response.status).toBe(200)
          |                               ^
      102 |       expect(data.period).toBe('all')
      103 |     })
      104 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:101:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should pass userId query parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      111 |       const data = await response.json()
      112 |
    > 113 |       expect(response.status).toBe(200)
          |                               ^
      114 |       expect(data.success).toBe(true)
      115 |     })
      116 |   })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:113:31)

  ● GET /api/analytics/struggle-reduction › Error Cases › should handle 404 user not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 503

      125 |       const data = await response.json()
      126 |
    > 127 |       expect(response.status).toBe(404)
          |                               ^
      128 |       expect(data.detail).toBe('User not found')
      129 |     })
      130 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:127:31)

  ● GET /api/analytics/struggle-reduction › Error Cases › should handle 422 insufficient data

    expect(received).toBe(expected) // Object.is equality

    Expected: 422
    Received: 503

      144 |       const data = await response.json()
      145 |
    > 146 |       expect(response.status).toBe(422)
          |                               ^
      147 |       expect(data.detail).toContain('Insufficient data')
      148 |     })
      149 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:146:31)

  ● GET /api/analytics/struggle-reduction › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      158 |       const data = await response.json()
      159 |
    > 160 |       expect(response.status).toBe(500)
          |                               ^
      161 |       expect(data.detail).toBe('Failed to calculate reduction')
      162 |     })
      163 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:160:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should return rates within valid ranges (0-1)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      197 |       const data = await response.json()
      198 |
    > 199 |       expect(response.status).toBe(200)
          |                               ^
      200 |       expect(data.baselineRate).toBeGreaterThanOrEqual(0)
      201 |       expect(data.baselineRate).toBeLessThanOrEqual(1)
      202 |       expect(data.currentRate).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:199:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should show improvement (current rate less than baseline)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      210 |       const data = await response.json()
      211 |
    > 212 |       expect(response.status).toBe(200)
          |                               ^
      213 |       expect(data.currentRate).toBeLessThan(data.baselineRate)
      214 |       expect(data.reductionPercentage).toBeGreaterThan(0)
      215 |     })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:212:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should have timeline with decreasing struggle rates

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      221 |       const data = await response.json()
      222 |
    > 223 |       expect(response.status).toBe(200)
          |                               ^
      224 |       data.timeline.forEach((point: { week: number; struggleRate: number }) => {
      225 |         expect(point.struggleRate).toBeGreaterThanOrEqual(0)
      226 |         expect(point.struggleRate).toBeLessThanOrEqual(1)

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:223:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should have intervention effectiveness within valid range

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      239 |       const data = await response.json()
      240 |
    > 241 |       expect(response.status).toBe(200)
          |                               ^
      242 |       data.interventionEffectiveness.forEach(
      243 |         (intervention: { type: string; applicationsCount: number; successRate: number }) => {
      244 |           expect(intervention.applicationsCount).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:241:31)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      258 |       const response = await GET(request)
      259 |
    > 260 |       expect(response.status).toBe(200)
          |                               ^
      261 |     })
      262 |
      263 |     it('should handle invalid period parameter gracefully', async () => {

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:260:31)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle invalid period parameter gracefully

    expect(received).toContain(expected) // indexOf

    Expected value: 503
    Received array: [200, 400]

      269 |
      270 |       // Should either return default or handle gracefully
    > 271 |       expect([200, 400]).toContain(response.status)
          |                          ^
      272 |     })
      273 |
      274 |     it('should handle concurrent requests', async () => {

      at Object.toContain (__tests__/api/analytics/struggle-reduction.test.ts:271:26)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle concurrent requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      280 |
      281 |       responses.forEach((response) => {
    > 282 |         expect(response.status).toBe(200)
          |                                 ^
      283 |       })
      284 |     })
      285 |

      at toBe (__tests__/api/analytics/struggle-reduction.test.ts:282:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (__tests__/api/analytics/struggle-reduction.test.ts:281:17)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle different period values correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      295 |         const data = await response.json()
      296 |
    > 297 |         expect(response.status).toBe(200)
          |                                 ^
      298 |         expect(data.period).toBe(period)
      299 |       }
      300 |     })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:297:33)

FAIL __tests__/api/analytics/model-performance.test.ts
  ● GET /api/analytics/model-performance › Success Cases › should return model performance metrics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      18 |       const data = await response.json()
      19 |
    > 20 |       expect(response.status).toBe(200)
         |                               ^
      21 |       expect(data.success).toBe(true)
      22 |       expect(data.accuracy).toBeDefined()
      23 |       expect(data.precision).toBeDefined()

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:20:31)

  ● GET /api/analytics/model-performance › Success Cases › should return metrics with correct data types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      33 |       const data = await response.json()
      34 |
    > 35 |       expect(response.status).toBe(200)
         |                               ^
      36 |       expect(typeof data.accuracy).toBe('number')
      37 |       expect(typeof data.precision).toBe('number')
      38 |       expect(typeof data.recall).toBe('number')

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:35:31)

  ● GET /api/analytics/model-performance › Success Cases › should include trend data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      48 |       const data = await response.json()
      49 |
    > 50 |       expect(response.status).toBe(200)
         |                               ^
      51 |       expect(Array.isArray(data.trend)).toBe(true)
      52 |       expect(data.trend.length).toBeGreaterThan(0)
      53 |       expect(data.trend[0]).toHaveProperty('date')

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:50:31)

  ● GET /api/analytics/model-performance › Success Cases › should include lastUpdated timestamp

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      61 |       const data = await response.json()
      62 |
    > 63 |       expect(response.status).toBe(200)
         |                               ^
      64 |       expect(data.lastUpdated).toBeDefined()
      65 |       expect(typeof data.lastUpdated).toBe('string')
      66 |       expect(new Date(data.lastUpdated).toString()).not.toBe('Invalid Date')

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:63:31)

  ● GET /api/analytics/model-performance › Success Cases › should pass userId query parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      75 |       const data = await response.json()
      76 |
    > 77 |       expect(response.status).toBe(200)
         |                               ^
      78 |       expect(data.success).toBe(true)
      79 |     })
      80 |   })

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:77:31)

  ● GET /api/analytics/model-performance › Error Cases › should handle 404 user not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 503

      89 |       const data = await response.json()
      90 |
    > 91 |       expect(response.status).toBe(404)
         |                               ^
      92 |       expect(data.detail).toBe('User not found')
      93 |     })
      94 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:91:31)

  ● GET /api/analytics/model-performance › Error Cases › should handle 422 insufficient data

    expect(received).toBe(expected) // Object.is equality

    Expected: 422
    Received: 503

      108 |       const data = await response.json()
      109 |
    > 110 |       expect(response.status).toBe(422)
          |                               ^
      111 |       expect(data.detail).toContain('Insufficient data')
      112 |     })
      113 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:110:31)

  ● GET /api/analytics/model-performance › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      122 |       const data = await response.json()
      123 |
    > 124 |       expect(response.status).toBe(500)
          |                               ^
      125 |       expect(data.detail).toBe('Failed to calculate metrics')
      126 |     })
      127 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:124:31)

  ● GET /api/analytics/model-performance › Metric Validation › should return metrics within valid ranges (0-1)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      161 |       const data = await response.json()
      162 |
    > 163 |       expect(response.status).toBe(200)
          |                               ^
      164 |       expect(data.accuracy).toBeGreaterThanOrEqual(0)
      165 |       expect(data.accuracy).toBeLessThanOrEqual(1)
      166 |       expect(data.precision).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:163:31)

  ● GET /api/analytics/model-performance › Metric Validation › should have positive data points count

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      178 |       const data = await response.json()
      179 |
    > 180 |       expect(response.status).toBe(200)
          |                               ^
      181 |       expect(data.dataPoints).toBeGreaterThan(0)
      182 |     })
      183 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:180:31)

  ● GET /api/analytics/model-performance › Metric Validation › should have trend data with valid dates

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      188 |       const data = await response.json()
      189 |
    > 190 |       expect(response.status).toBe(200)
          |                               ^
      191 |       data.trend.forEach((point: { date: string; accuracy: number }) => {
      192 |         expect(new Date(point.date).toString()).not.toBe('Invalid Date')
      193 |         expect(point.accuracy).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:190:31)

  ● GET /api/analytics/model-performance › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      205 |       const response = await GET(request)
      206 |
    > 207 |       expect(response.status).toBe(200)
          |                               ^
      208 |     })
      209 |
      210 |     it('should handle concurrent requests', async () => {

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:207:31)

  ● GET /api/analytics/model-performance › Edge Cases › should handle concurrent requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      216 |
      217 |       responses.forEach((response) => {
    > 218 |         expect(response.status).toBe(200)
          |                                 ^
      219 |       })
      220 |     })
      221 |   })

      at toBe (__tests__/api/analytics/model-performance.test.ts:218:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (__tests__/api/analytics/model-performance.test.ts:217:17)

FAIL __tests__/subsystems/behavioral-analytics/study-intensity-modulator.test.ts
  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'fn')

       8 |
       9 | // Mock fetch for Story 5.4 API integration
    > 10 | global.fetch = vi.fn()
         |                   ^
      11 |
      12 | // Mock dependencies
      13 | vi.mock('@/lib/db', () => ({

      at Object.fn (__tests__/subsystems/behavioral-analytics/study-intensity-modulator.test.ts:10:19)

PASS src/app/api/analytics/behavioral-insights/__tests__/goals.test.ts
FAIL __tests__/api/analytics/predictions-feedback.test.ts
  ● Test suite failed to run

    Cannot find module '../../../setup' from '__tests__/api/analytics/predictions-feedback.test.ts'

      10 | import { server, createErrorHandler, create503Handler } from '../../../setup'
      11 |
    > 12 | describe('POST /api/analytics/predictions/[id]/feedback', () => {
         |                ^
      13 |   describe('Success Cases', () => {
      14 |     it('should submit prediction feedback successfully', async () => {
      15 |       const request = new NextRequest(

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (__tests__/api/analytics/predictions-feedback.test.ts:12:16)

FAIL src/app/api/analytics/behavioral-insights/__tests__/recommendations.test.ts
  ● GET /api/analytics/behavioral-insights/recommendations › should return 400 for invalid limit parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      141 |     const response = await GET(request)
      142 |
    > 143 |     expect(response.status).toBe(400)
          |                             ^
      144 |   })
      145 |
      146 |   it('should return 400 for missing userId parameter', async () => {

      at Object.toBe (src/app/api/analytics/behavioral-insights/__tests__/recommendations.test.ts:143:29)

  ● GET /api/analytics/behavioral-insights/recommendations › should return 400 for missing userId parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      151 |     const response = await GET(request)
      152 |
    > 153 |     expect(response.status).toBe(400)
          |                             ^
      154 |   })
      155 | })
      156 |

      at Object.toBe (src/app/api/analytics/behavioral-insights/__tests__/recommendations.test.ts:153:29)

PASS __tests__/integration/personalization-epic5-integration.test.ts
FAIL __tests__/subsystems/behavioral-analytics/study-time-recommender.test.ts
  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'mock')

      10 |
      11 | // Mock dependencies
    > 12 | vi.mock('@/lib/db', () => ({
         |    ^
      13 |   prisma: {
      14 |     userLearningProfile: {
      15 |       findUnique: vi.fn(),

      at Object.mock (__tests__/subsystems/behavioral-analytics/study-time-recommender.test.ts:12:4)

PASS src/__tests__/performance/analytics-performance.test.ts
  ● Console

    console.log
      7-day analytics: 0.04ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:64:15)

    console.log
      30-day analytics: 0.06ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:78:15)

    console.log
      90-day analytics: 0.03ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:92:15)

    console.log
      Daily analytics: 0.06ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:106:15)

    console.log
      365-day analytics: 0.05ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:120:15)

    console.log
      Recommendation generation: 0.02ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:136:15)

    console.log
      Pattern analysis: 0.27ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:150:15)

    console.log
      Adaptation recommendations: 0.09ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:169:15)

    console.log
      Performance correlation: 0.05ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:185:15)

    console.log
      Minimal correlation: 0.02ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:199:15)

    console.log
      Chart data preparation: 0.20ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:227:15)

    console.log
      Weekly aggregation: 0.18ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:258:15)

    console.log
      10 concurrent requests: 0.16ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:280:15)

    console.log
      Mixed concurrent operations: 0.19ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:301:15)

    console.log
      Memory increase after 100 calls: 0.31MB

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:323:15)

    console.log
      Large objectives processing: 0.03ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:350:15)

    console.log
      Indexed date query: 0.01ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:376:15)

    console.log
      Aggregation query: 0.05ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:405:15)

    console.log
      100 missions processing: 0.03ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:421:15)

    console.log
      50 sequential requests: 0.23ms (avg: 0.00ms)

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:441:15)

    console.log
      Empty dataset: 0.01ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:458:15)

    console.log
      Single mission: 0.01ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:472:15)

    console.log
      No feedback missions: 0.03ms

      at Object.log (src/__tests__/performance/analytics-performance.test.ts:496:15)

PASS src/__tests__/lib/mission-adaptation.test.ts
  ● Console

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)

    console.log
      Adaptation cooldown active. 4 days remaining.

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:343:17)

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)

    console.log
      No high-priority adaptations to apply.

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:356:15)

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)
          at async Promise.all (index 0)

    console.log
      Applied 1 adaptations for user user1

      at MissionAdaptationEngine.log [as applyAdaptations] (src/lib/mission-adaptation-engine.ts:396:13)
          at async Promise.all (index 1)

FAIL __tests__/api/analytics/interventions-apply.test.ts
  ● Test suite failed to run

    Cannot find module '../../../setup' from '__tests__/api/analytics/interventions-apply.test.ts'

      10 | import { server, createErrorHandler, create503Handler } from '../../../setup'
      11 |
    > 12 | describe('POST /api/analytics/interventions/[id]/apply', () => {
         |                ^
      13 |   describe('Success Cases', () => {
      14 |     it('should apply intervention successfully', async () => {
      15 |       const request = new NextRequest(

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (__tests__/api/analytics/interventions-apply.test.ts:12:16)

FAIL __tests__/performance/story-5.4-benchmarks.test.ts
  ● Console

    console.log
      
              ===== CognitiveLoadMonitor Performance =====
              Iterations: 100
              Average: 0.03ms
              P95: 0.04ms
              Max: 0.17ms
              Threshold: 100ms
              ==========================================

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:168:15)

    console.log
      
              ===== Concurrent Load Test =====
              Concurrent calls: 10
              Total duration: 11.51ms
              Avg per call: 1.15ms
              ===============================

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:197:15)

    console.log
      Burnout assessment completed in 7.55ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Single burnout assessment: 12.99ms

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:271:15)

    console.log
      Burnout assessment completed in 0.51ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.43ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 1.02ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.19ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.17ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.19ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.16ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.28ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.19ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.17ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 3.28ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.17ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.18ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.16ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.16ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.18ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.16ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.17ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.14ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.16ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 1.13ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Burnout assessment completed in 0.15ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      
              ===== BurnoutPreventionEngine Performance =====
              Iterations: 50
              Average: 0.51ms
              P95: 1.24ms
              Max: 9.73ms
              Threshold: 500ms
              ==============================================

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:289:15)

    console.log
      Warning signal detection: 0.10ms

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:308:15)

    console.log
      Intervention recommendation: 0.11ms

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:337:15)

    console.log
      Burnout assessment completed in 0.83ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Large dataset assessment (90 days): 0.93ms

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:390:15)

    console.log
      Burnout assessment completed in 0.80ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)

    console.log
      Extreme load scenario: 0.06ms, score: 50

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:499:15)

    console.log
      Burnout assessment completed in 3.79ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)
          at async Promise.all (index 0)

    console.log
      Burnout assessment completed in 3.88ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)
          at async Promise.all (index 1)

    console.log
      Burnout assessment completed in 3.91ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)
          at async Promise.all (index 2)

    console.log
      Burnout assessment completed in 3.94ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)
          at async Promise.all (index 3)

    console.log
      Burnout assessment completed in 3.97ms

      at BurnoutPreventionEngine.log [as assessBurnoutRisk] (src/subsystems/behavioral-analytics/burnout-prevention-engine.ts:212:15)
          at async Promise.all (index 4)

    console.log
      
              ===== Concurrent Burnout Assessments =====
              Users: 5
              Total: 4.06ms
              Avg: 0.81ms
              =========================================

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:519:15)

    console.log
      
      ╔══════════════════════════════════════════════════════════════════╗
      ║                 STORY 5.4 PERFORMANCE SUMMARY                     ║
      ╠══════════════════════════════════════════════════════════════════╣
      ║                                                                   ║
      ║  ✅ BENCHMARK 1: CognitiveLoadMonitor                            ║
      ║     Target: <100ms                                               ║
      ║     Status: All tests passing                                    ║
      ║                                                                   ║
      ║  ✅ BENCHMARK 2: BurnoutPreventionEngine                         ║
      ║     Target: <500ms                                               ║
      ║     Status: All tests passing                                    ║
      ║                                                                   ║
      ║  ✅ BENCHMARK 3: Memory & Resources                              ║
      ║     Status: No memory leaks detected                             ║
      ║                                                                   ║
      ║  ✅ BENCHMARK 4: Database Queries                                ║
      ║     Status: Optimized parallel queries                           ║
      ║                                                                   ║
      ║  ✅ BENCHMARK 5: Edge Cases                                      ║
      ║     Status: Handles extreme scenarios gracefully                 ║
      ║                                                                   ║
      ╠══════════════════════════════════════════════════════════════════╣
      ║  RECOMMENDATIONS:                                                 ║
      ║  1. Monitor P95 latency in production with APM                   ║
      ║  2. Add database query caching for repeated assessments          ║
      ║  3. Implement connection pooling for high concurrency            ║
      ║  4. Set up alerting for >150ms cognitive load calculations       ║
      ║  5. Use Redis for 24-hour burnout assessment caching             ║
      ╚══════════════════════════════════════════════════════════════════╝

      at Object.log (__tests__/performance/story-5.4-benchmarks.test.ts:538:11)

  ● Story 5.4 Performance Benchmarks › Benchmark 4: Database Query Optimization › Cognitive load calculation minimizes database writes

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      435 |
      436 |       // Should only create 1 metric record per calculation
    > 437 |       expect(createSpy).toHaveBeenCalledTimes(1)
          |                         ^
      438 |     })
      439 |   })
      440 |

      at Object.toHaveBeenCalledTimes (__tests__/performance/story-5.4-benchmarks.test.ts:437:25)

  ● Story 5.4 Performance Benchmarks › Benchmark 5: Edge Cases & Stress Scenarios › Handles extreme load scenarios efficiently

    expect(received).toBeGreaterThan(expected)

    Expected: > 70
    Received:   50

      500 |
      501 |       expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COGNITIVE_LOAD_CALCULATION)
    > 502 |       expect(result.loadScore).toBeGreaterThan(70) // Should detect overload
          |                                ^
      503 |     })
      504 |
      505 |     test('Concurrent assessments do not block each other', async () => {

      at Object.toBeGreaterThan (__tests__/performance/story-5.4-benchmarks.test.ts:502:32)

PASS __tests__/integration/ml-service-proxy.test.ts
PASS __tests__/performance/api-load-tests.test.ts (15.247 s)
  ● Console

    console.log
      Single /calculate request: 85.45ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:76:15)

    console.log
      
              ===== /calculate Concurrent Load Test =====
              Concurrent requests: 50
              Total duration: 120.80ms
              Avg per request: 2.42ms
              ===========================================

      at Object.log (__tests__/performance/api-load-tests.test.ts:97:15)

    console.log
      
              ===== /calculate Sustained Load =====
              Requests: 10
              Avg: 97.35ms
              P95: 119.74ms
              =====================================

      at Object.log (__tests__/performance/api-load-tests.test.ts:120:15)

    console.log
      GET /current: 81.22ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:147:15)

    console.log
      GET /current avg (100 requests): 50.63ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:163:15)

    console.log
      GET /history (7 days): 301.95ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:182:15)

    console.log
      GET /history (30 days): 400.43ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:194:15)

    console.log
      GET /burnout-risk (cached): 10.67ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:212:15)

    console.log
      GET /burnout-risk (fresh): 451.15ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:224:15)

    console.log
      Cached burnout assessment avg: 16.03ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:240:15)

    console.log
      GET /stress-patterns: 151.15ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:258:15)

    console.log
      With filter: 101.17ms, No filter: 201.48ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:271:15)

    console.log
      GET /stress-profile: 181.18ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:291:15)

    console.log
      POST /interventions/apply: 351.66ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:310:15)

    console.log
      Avg intervention application: 193.20ms

      at Object.log (__tests__/performance/api-load-tests.test.ts:333:15)

    console.log
      
              ╔═══════════════════════════════════════════════════╗
              ║       MIXED TRAFFIC LOAD TEST RESULTS             ║
              ╠═══════════════════════════════════════════════════╣
              ║  Total requests: 100                              ║
              ║  Total duration: 394.20ms                    ║
              ║  Avg per request: 120.64ms                   ║
              ║  P95 latency: 360.27ms                       ║
              ║  Max latency: 393.03ms                       ║
              ║                                                   ║
              ║  Traffic Mix:                                     ║
              ║    - calculate (30%): Heavy computation           ║
              ║    - current (25%): Fast reads                    ║
              ║    - burnout (15%): Cached reads                  ║
              ║    - history (15%): Time-series queries           ║
              ║    - patterns (10%): Medium complexity            ║
              ║    - apply (5%): Write operations                 ║
              ╚═══════════════════════════════════════════════════╝

      at Object.log (__tests__/performance/api-load-tests.test.ts:393:15)

    console.log
      
              ===== Traffic Spike Test =====
              Normal load (10 req): 103.00ms
              Spike load (50 req): 98.28ms
              Recovery load (10 req): 97.53ms
              ==============================

      at Object.log (__tests__/performance/api-load-tests.test.ts:434:15)

    console.log
      
              ===== Error Handling Test =====
              Total requests: 50
              Successful: 42
              Failed: 8
              Avg duration: 86.93ms
              ==============================

      at Object.log (__tests__/performance/api-load-tests.test.ts:477:15)

    console.log
      
              ===== Database Pressure Test =====
              Low pressure: 110.61ms
              Medium pressure: 151.25ms
              High pressure: 205.61ms
              =================================

      at Object.log (__tests__/performance/api-load-tests.test.ts:508:15)

    console.log
      
      ╔══════════════════════════════════════════════════════════════════╗
      ║              STORY 5.4 API LOAD TEST SUMMARY                      ║
      ╠══════════════════════════════════════════════════════════════════╣
      ║                                                                   ║
      ║  ✅ All 7 API endpoints tested                                   ║
      ║  ✅ Response times <1s under load                                ║
      ║  ✅ Concurrent request handling validated                        ║
      ║  ✅ Mixed traffic patterns simulated                             ║
      ║  ✅ Error handling and resilience verified                       ║
      ║                                                                   ║
      ╠══════════════════════════════════════════════════════════════════╣
      ║  PRODUCTION RECOMMENDATIONS:                                      ║
      ║                                                                   ║
      ║  1. MONITORING & ALERTING:                                        ║
      ║     - Set up APM (DataDog/New Relic) for real-time metrics       ║
      ║     - Alert on P95 > 500ms for /calculate endpoint               ║
      ║     - Alert on P95 > 800ms for /burnout-risk                     ║
      ║     - Track error rate (target <1%)                              ║
      ║                                                                   ║
      ║  2. DATABASE OPTIMIZATION:                                        ║
      ║     - Add indexes on userId, timestamp, sessionId                ║
      ║     - Implement connection pooling (min 10, max 50)              ║
      ║     - Use read replicas for GET endpoints                        ║
      ║     - Enable query result caching (Redis)                        ║
      ║                                                                   ║
      ║  3. CACHING STRATEGY:                                             ║
      ║     - Redis for burnout assessments (24hr TTL)                   ║
      ║     - In-memory cache for stress profiles (1hr TTL)              ║
      ║     - CDN for static dashboard content                           ║
      ║                                                                   ║
      ║  4. LOAD BALANCING:                                               ║
      ║     - Multiple API server instances                              ║
      ║     - Health checks every 30s                                    ║
      ║     - Graceful degradation under high load                       ║
      ║                                                                   ║
      ║  5. RATE LIMITING:                                                ║
      ║     - 100 requests/minute per user for /calculate                ║
      ║     - 10 requests/hour for /burnout-risk (expensive)             ║
      ║     - 1000 requests/minute per user for read endpoints           ║
      ║                                                                   ║
      ║  6. PERFORMANCE BUDGETS:                                          ║
      ║     - P50: 150ms                                                 ║
      ║     - P95: 500ms                                                 ║
      ║     - P99: 1000ms                                                ║
      ║     - Error rate: <1%                                            ║
      ║                                                                   ║
      ╚══════════════════════════════════════════════════════════════════╝

      at Object.log (__tests__/performance/api-load-tests.test.ts:553:11)


Summary of all failing tests
FAIL src/__tests__/smoke.test.ts
  ● Jest Configuration Smoke Test › should support jest-dom matchers

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      40 |   it('should support jest-dom matchers', () => {
      41 |     // jest-dom matchers should be available via setupFilesAfterEnv
    > 42 |     expect(document.createElement('div')).toBeInTheDocument
         |            ^
      43 |   })
      44 | })
      45 |

      at Object.document (src/__tests__/smoke.test.ts:42:12)

  ● Test Environment Verification › should have jsdom environment

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      83 | describe('Test Environment Verification', () => {
      84 |   it('should have jsdom environment', () => {
    > 85 |     expect(document).toBeDefined()
         |            ^
      86 |     expect(window).toBeDefined()
      87 |     expect(navigator).toBeDefined()
      88 |   })

      at Object.document (src/__tests__/smoke.test.ts:85:12)

  ● Test Environment Verification › should have document API available

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      89 |
      90 |   it('should have document API available', () => {
    > 91 |     const div = document.createElement('div')
         |                 ^
      92 |     div.textContent = 'test'
      93 |     expect(div.textContent).toBe('test')
      94 |   })

      at Object.document (src/__tests__/smoke.test.ts:91:17)

  ● Test Environment Verification › should have localStorage available

    ReferenceError: localStorage is not defined

       95 |
       96 |   it('should have localStorage available', () => {
    >  97 |     expect(localStorage).toBeDefined()
          |            ^
       98 |     localStorage.setItem('test', 'value')
       99 |     expect(localStorage.getItem('test')).toBe('value')
      100 |     localStorage.removeItem('test')

      at Object.localStorage (src/__tests__/smoke.test.ts:97:12)

FAIL src/subsystems/__tests__/struggle-feature-extraction.test.ts
  ● StruggleFeatureExtractor › Feature Extraction Accuracy (13.2) › Strong Objective (Anatomy - 85% retention) › should calculate low weakness score for strong objective

    expect(received).toBe(expected) // Object.is equality

    Expected: 0.15
    Received: 0.15000000000000002

      61 |       it('should calculate low weakness score for strong objective', () => {
      62 |         const weaknessScore = 1 - 0.85 // Inverse of retention
    > 63 |         expect(weaknessScore).toBe(0.15)
         |                               ^
      64 |         expect(weaknessScore).toBeLessThan(0.3) // Strong area
      65 |       })
      66 |

      at Object.toBe (src/subsystems/__tests__/struggle-feature-extraction.test.ts:63:31)

  ● StruggleFeatureExtractor › Feature Extraction Accuracy (13.2) › Weak Objective (Physiology - 30% retention) › should identify complexity mismatch for weak student

    expect(received).toBe(expected) // Object.is equality

    Expected: 0.6
    Received: 0.6000000000000001

      141 |         const complexityMismatch = Math.max(0, contentComplexity - userAbilityLevel)
      142 |
    > 143 |         expect(complexityMismatch).toBe(0.6)
          |                                    ^
      144 |         expect(complexityMismatch).toBeGreaterThan(0.5) // Significant mismatch
      145 |       })
      146 |

      at Object.toBe (src/subsystems/__tests__/struggle-feature-extraction.test.ts:143:36)

  ● StruggleFeatureExtractor › Edge Cases › should handle user with insufficient data (<4 weeks)

    expect(received).toBeLessThan(expected)

    Expected: < 0.5
    Received:   0.5

      437 |       const dataQuality = Math.min(daysOfData / 28, 1.0)
      438 |
    > 439 |       expect(dataQuality).toBeLessThan(0.5)
          |                           ^
      440 |     })
      441 |
      442 |     it('should handle objective with no review history', () => {

      at Object.toBeLessThan (src/subsystems/__tests__/struggle-feature-extraction.test.ts:439:27)

FAIL src/__tests__/components/smoke.test.tsx
  ● React Testing Library Smoke Test › should render a component

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:23:11)

  ● React Testing Library Smoke Test › should support role queries

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:30:11)

  ● React Testing Library Smoke Test › should support jest-dom matchers

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:40:11)

  ● React Testing Library Smoke Test › should handle component updates

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:48:32)

  ● React Testing Library Smoke Test › should support async queries

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:61:11)

  ● Component Accessibility Testing › should verify accessible elements

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      17 |
      18 | const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
    > 19 |   render(ui, { wrapper: AllTheProviders, ...options })
         |         ^
      20 |
      21 | // Re-export everything from React Testing Library
      22 | export * from '@testing-library/react'

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at customRender (src/__tests__/test-utils.tsx:19:9)
      at Object.<anonymous> (src/__tests__/components/smoke.test.tsx:70:11)

FAIL src/__tests__/integration/feedback-loop.test.ts
  ● Mission Feedback Loop Integration › Adaptation Triggers from Feedback › should combine feedback with completion data for recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      285 |       // Should detect HIGH_COMPLETION (>90%)
      286 |       const hasHighCompletion = patterns.patterns.some((p) => p.type === 'HIGH_COMPLETION')
    > 287 |       expect(hasHighCompletion).toBe(true)
          |                                 ^
      288 |
      289 |       // Combined with pace feedback, should recommend increasing complexity
      290 |     })

      at Object.toBe (src/__tests__/integration/feedback-loop.test.ts:287:33)

FAIL __tests__/subsystems/behavioral-analytics/personalization-engine.test.ts
  ● PersonalizationEngine › aggregateInsights › should filter predictions by minimum confidence threshold

    expect(received).toBeNull()

    Received: {"activePredictions": [{"confidence": 0.65, "id": "pred-1", "indicators": [], "probability": undefined, "topicId": undefined}], "interventions": []}

      179 |       const insights = await engine.aggregateInsights(testUserId)
      180 |
    > 181 |       expect(insights.predictions).toBeNull()
          |                                    ^
      182 |     })
      183 |
      184 |     it('should calculate cognitive load level correctly', async () => {

      at Object.toBeNull (__tests__/subsystems/behavioral-analytics/personalization-engine.test.ts:181:36)

  ● PersonalizationEngine › applyPersonalization - Mission Context › should use optimal session duration from patterns

    expect(received).toContain(expected) // indexOf

    Expected value: "Session duration set to optimal 60 minutes"
    Received array: ["Personalization confidence: 80% (1/4 data sources available)", "Session duration set to optimal 60 minutes (confidence: 85%)"]

      364 |
      365 |       expect(config.missionPersonalization.recommendedDuration).toBe(60)
    > 366 |       expect(config.reasoning).toContain('Session duration set to optimal 60 minutes')
          |                                ^
      367 |     })
      368 |   })
      369 |

      at Object.toContain (__tests__/subsystems/behavioral-analytics/personalization-engine.test.ts:366:32)

  ● PersonalizationEngine › applyPersonalization - Content Context › should adjust review frequency based on forgetting curve

    expect(received).toContain(expected) // indexOf

    Expected value: "Review frequency adjusted based on personal forgetting curve"
    Received array: ["Personalization confidence: 80% (1/4 data sources available)", "Content adapted for visual learning preference", "Review frequency adjusted based on personal forgetting curve (half-life: 2.8 days)"]

      483 |
      484 |       expect(config.contentPersonalization.reviewFrequency).toBeGreaterThan(30) // High frequency for steep curve
    > 485 |       expect(config.reasoning).toContain(
          |                                ^
      486 |         'Review frequency adjusted based on personal forgetting curve',
      487 |       )
      488 |     })

      at Object.toContain (__tests__/subsystems/behavioral-analytics/personalization-engine.test.ts:485:32)

FAIL __tests__/api/analytics/predictions.test.ts
  ● GET /api/analytics/predictions › Error Cases › should handle 503 service unavailable

    expect(received).toBe(expected) // Object.is equality

    Expected: "ML service unavailable"
    Received: undefined

      90 |
      91 |       expect(response.status).toBe(503)
    > 92 |       expect(data.error).toBe('ML service unavailable')
         |                          ^
      93 |     })
      94 |
      95 |     it('should handle network errors gracefully', async () => {

      at Object.toBe (__tests__/api/analytics/predictions.test.ts:92:26)

  ● GET /api/analytics/predictions › Error Cases › should handle network errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 200

      103 |       const data = await response.json()
      104 |
    > 105 |       expect(response.status).toBe(503)
          |                               ^
      106 |       expect(data.error).toBe('ML service unavailable')
      107 |       expect(data.detail).toBeDefined()
      108 |

      at Object.toBe (__tests__/api/analytics/predictions.test.ts:105:31)

FAIL src/__tests__/lib/mission-analytics.test.ts
  ● MissionAnalyticsEngine › detectPerformanceCorrelation › should calculate high confidence with sufficient data

    expect(received).toBe(expected) // Object.is equality

    Expected: "HIGH"
    Received: "LOW"

      300 |
      301 |       expect(result.sampleSize).toBe(30)
    > 302 |       expect(result.confidence).toBe('HIGH')
          |                                 ^
      303 |       expect(result.pValue).toBeLessThan(0.01)
      304 |     })
      305 |

      at Object.toBe (src/__tests__/lib/mission-analytics.test.ts:302:33)

  ● MissionAnalyticsEngine › detectPerformanceCorrelation › should generate appropriate insights for strong correlation

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      323 |       const result = await engine.detectPerformanceCorrelation('user1')
      324 |
    > 325 |       expect(result.correlationCoefficient).toBeGreaterThan(0)
          |                                             ^
      326 |       expect(result.insight).toBeTruthy()
      327 |       expect(result.insight.length).toBeGreaterThan(0)
      328 |     })

      at Object.toBeGreaterThan (src/__tests__/lib/mission-analytics.test.ts:325:45)

  ● MissionAnalyticsEngine › recommendMissionAdjustments › should recommend reducing duration for low completion

    expect(received).toBeDefined()

    Received: undefined

      342 |       const result = await engine.recommendMissionAdjustments('user1')
      343 |
    > 344 |       expect(result.adjustments.duration).toBeDefined()
          |                                           ^
      345 |       expect(result.adjustments.duration?.current).toBe(60)
      346 |       expect(result.adjustments.duration?.recommended).toBe(51) // 60 * 0.85 = 51
      347 |       expect(result.adjustments.duration?.reason).toContain('below optimal')

      at Object.toBeDefined (src/__tests__/lib/mission-analytics.test.ts:344:43)

  ● MissionAnalyticsEngine › recommendMissionAdjustments › should not recommend adjustments for optimal completion rate

    expect(received).toBeUndefined()

    Received: {"current": "MODERATE", "reason": "Completion rate 100.0% is above optimal 70-90% range. Increase challenge for better engagement.", "recommended": "CHALLENGING"}

      417 |       // Should not recommend duration or complexity changes
      418 |       expect(result.adjustments.duration).toBeUndefined()
    > 419 |       expect(result.adjustments.complexity).toBeUndefined()
          |                                             ^
      420 |     })
      421 |   })
      422 |

      at Object.toBeUndefined (src/__tests__/lib/mission-analytics.test.ts:419:45)

FAIL __tests__/api/analytics/interventions.test.ts
  ● GET /api/analytics/interventions › Success Cases › should return active interventions

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      18 |       const data = await response.json()
      19 |
    > 20 |       expect(response.status).toBe(200)
         |                               ^
      21 |       expect(data.success).toBe(true)
      22 |       expect(data.interventions).toHaveLength(2)
      23 |       expect(data.count).toBe(2)

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:20:31)

  ● GET /api/analytics/interventions › Success Cases › should return interventions with correct structure

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      30 |       const data = await response.json()
      31 |
    > 32 |       expect(response.status).toBe(200)
         |                               ^
      33 |       expect(data.interventions[0]).toMatchObject({
      34 |         id: expect.any(String),
      35 |         predictionId: expect.any(String),

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:32:31)

  ● GET /api/analytics/interventions › Success Cases › should pass userId query parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      52 |       const data = await response.json()
      53 |
    > 54 |       expect(response.status).toBe(200)
         |                               ^
      55 |       expect(data.success).toBe(true)
      56 |     })
      57 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:54:31)

  ● GET /api/analytics/interventions › Success Cases › should handle empty intervention list

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      63 |       const response = await GET(request)
      64 |
    > 65 |       expect(response.status).toBe(200)
         |                               ^
      66 |     })
      67 |   })
      68 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:65:31)

  ● GET /api/analytics/interventions › Error Cases › should handle 404 not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 503

      76 |       const data = await response.json()
      77 |
    > 78 |       expect(response.status).toBe(404)
         |                               ^
      79 |       expect(data.detail).toBe('No interventions found')
      80 |     })
      81 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:78:31)

  ● GET /api/analytics/interventions › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      88 |       const data = await response.json()
      89 |
    > 90 |       expect(response.status).toBe(500)
         |                               ^
      91 |       expect(data.detail).toBe('Failed to fetch interventions')
      92 |     })
      93 |

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:90:31)

  ● GET /api/analytics/interventions › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      128 |       const response = await GET(request)
      129 |
    > 130 |       expect(response.status).toBe(200)
          |                               ^
      131 |     })
      132 |
      133 |     it('should handle concurrent requests', async () => {

      at Object.toBe (__tests__/api/analytics/interventions.test.ts:130:31)

  ● GET /api/analytics/interventions › Edge Cases › should handle concurrent requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      139 |
      140 |       responses.forEach((response) => {
    > 141 |         expect(response.status).toBe(200)
          |                                 ^
      142 |       })
      143 |     })
      144 |

      at toBe (__tests__/api/analytics/interventions.test.ts:141:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (__tests__/api/analytics/interventions.test.ts:140:17)

  ● GET /api/analytics/interventions › Edge Cases › should validate intervention types

    TypeError: Cannot read properties of undefined (reading 'forEach')

      158 |       ]
      159 |
    > 160 |       data.interventions.forEach((intervention: { interventionType: string }) => {
          |                          ^
      161 |         expect(validTypes).toContain(intervention.interventionType)
      162 |       })
      163 |     })

      at Object.forEach (__tests__/api/analytics/interventions.test.ts:160:26)

FAIL __tests__/api/analytics/predictions-generate.test.ts
  ● POST /api/analytics/predictions/generate › Success Cases › should generate predictions for user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      24 |       const data = await response.json()
      25 |
    > 26 |       expect(response.status).toBe(200)
         |                               ^
      27 |       expect(data.success).toBe(true)
      28 |       expect(data.predictions).toBeDefined()
      29 |       expect(Array.isArray(data.predictions)).toBe(true)

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:26:31)

  ● POST /api/analytics/predictions/generate › Success Cases › should use default daysAhead when not provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      43 |       const data = await response.json()
      44 |
    > 45 |       expect(response.status).toBe(200)
         |                               ^
      46 |       expect(data.success).toBe(true)
      47 |     })
      48 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:45:31)

  ● POST /api/analytics/predictions/generate › Success Cases › should return predictions with correct structure

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      59 |       const data = await response.json()
      60 |
    > 61 |       expect(response.status).toBe(200)
         |                               ^
      62 |       expect(data.predictions[0]).toMatchObject({
      63 |         id: expect.any(String),
      64 |         userId: expect.any(String),

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:61:31)

  ● POST /api/analytics/predictions/generate › Error Cases › should handle 400 bad request from FastAPI

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 503

      82 |       const data = await response.json()
      83 |
    > 84 |       expect(response.status).toBe(400)
         |                               ^
      85 |       expect(data.detail).toBe('Invalid request body')
      86 |     })
      87 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:84:31)

  ● POST /api/analytics/predictions/generate › Error Cases › should handle 422 validation error

    expect(received).toBe(expected) // Object.is equality

    Expected: 422
    Received: 503

      104 |       const data = await response.json()
      105 |
    > 106 |       expect(response.status).toBe(422)
          |                               ^
      107 |       expect(data.detail).toContain('Validation error')
      108 |     })
      109 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:106:31)

  ● POST /api/analytics/predictions/generate › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      128 |       const data = await response.json()
      129 |
    > 130 |       expect(response.status).toBe(500)
          |                               ^
      131 |       expect(data.detail).toBe('Internal prediction engine error')
      132 |     })
      133 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:130:31)

  ● POST /api/analytics/predictions/generate › Edge Cases › should handle daysAhead boundary values

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      200 |
      201 |         const response = await POST(request)
    > 202 |         expect(response.status).toBe(200)
          |                                 ^
      203 |       }
      204 |     })
      205 |

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:202:33)

  ● POST /api/analytics/predictions/generate › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      214 |
      215 |       const response = await POST(request)
    > 216 |       expect(response.status).toBe(200)
          |                               ^
      217 |     })
      218 |
      219 |     it('should handle large daysAhead values', async () => {

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:216:31)

  ● POST /api/analytics/predictions/generate › Edge Cases › should handle large daysAhead values

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      227 |
      228 |       const response = await POST(request)
    > 229 |       expect(response.status).toBe(200)
          |                               ^
      230 |     })
      231 |   })
      232 | })

      at Object.toBe (__tests__/api/analytics/predictions-generate.test.ts:229:31)

FAIL src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts
  ● GET /api/analytics/behavioral-insights/correlation › Query Parameter Validation › should accept valid weeks parameter (8-52)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

       97 |       const data = await response.json()
       98 |
    >  99 |       expect(response.status).toBe(200)
          |                               ^
      100 |       expect(data.success).toBe(true)
      101 |     })
      102 |

      at Object.toBe (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:99:31)

  ● GET /api/analytics/behavioral-insights/correlation › Query Parameter Validation › should use default weeks=12 when not specified

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      109 |       const data = await response.json()
      110 |
    > 111 |       expect(response.status).toBe(200)
          |                               ^
      112 |       expect(data.success).toBe(true)
      113 |     })
      114 |

      at Object.toBe (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:111:31)

  ● GET /api/analytics/behavioral-insights/correlation › Query Parameter Validation › should accept metric parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      121 |       const data = await response.json()
      122 |
    > 123 |       expect(response.status).toBe(200)
          |                               ^
      124 |       expect(data.success).toBe(true)
      125 |     })
      126 |   })

      at Object.toBe (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:123:31)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should return Pearson correlation coefficient in valid range [-1, 1]

    TypeError: Cannot read properties of undefined (reading 'coefficient')

      135 |       const data = await response.json()
      136 |
    > 137 |       expect(data.data.coefficient).toBeGreaterThanOrEqual(-1)
          |                        ^
      138 |       expect(data.data.coefficient).toBeLessThanOrEqual(1)
      139 |       expect(typeof data.data.coefficient).toBe('number')
      140 |     })

      at Object.coefficient (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:137:24)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should return p-value in valid range [0, 1]

    TypeError: Cannot read properties of undefined (reading 'pValue')

      148 |       const data = await response.json()
      149 |
    > 150 |       expect(data.data.pValue).toBeGreaterThanOrEqual(0)
          |                        ^
      151 |       expect(data.data.pValue).toBeLessThanOrEqual(1)
      152 |       expect(typeof data.data.pValue).toBe('number')
      153 |     })

      at Object.pValue (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:150:24)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should return 95% confidence interval with valid bounds

    TypeError: Cannot read properties of undefined (reading 'confidenceInterval')

      161 |       const data = await response.json()
      162 |
    > 163 |       const [lower, upper] = data.data.confidenceInterval
          |                                        ^
      164 |
      165 |       expect(lower).toBeGreaterThanOrEqual(-1)
      166 |       expect(upper).toBeLessThanOrEqual(1)

      at Object.confidenceInterval (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:163:40)

  ● GET /api/analytics/behavioral-insights/correlation › Statistical Accuracy Validation › should include interpretation string

    TypeError: Cannot read properties of undefined (reading 'interpretation')

      178 |       const data = await response.json()
      179 |
    > 180 |       expect(typeof data.data.interpretation).toBe('string')
          |                               ^
      181 |       expect(data.data.interpretation.length).toBeGreaterThan(0)
      182 |       expect(data.data.interpretation).toContain('p=')
      183 |     })

      at Object.interpretation (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:180:31)

  ● GET /api/analytics/behavioral-insights/correlation › Time Series Data Validation › should return time series data with correct structure

    TypeError: Cannot read properties of undefined (reading 'timeSeriesData')

      193 |       const data = await response.json()
      194 |
    > 195 |       expect(data.data.timeSeriesData).toBeDefined()
          |                        ^
      196 |       expect(Array.isArray(data.data.timeSeriesData)).toBe(true)
      197 |       expect(data.data.timeSeriesData.length).toBeGreaterThan(0)
      198 |

      at Object.timeSeriesData (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:195:24)

  ● GET /api/analytics/behavioral-insights/correlation › Time Series Data Validation › should validate behavioral scores are in range [0, 100]

    TypeError: Cannot read properties of undefined (reading 'timeSeriesData')

      211 |       const data = await response.json()
      212 |
    > 213 |       data.data.timeSeriesData.forEach((point: any) => {
          |                 ^
      214 |         expect(point.behavioralScore).toBeGreaterThanOrEqual(0)
      215 |         expect(point.behavioralScore).toBeLessThanOrEqual(100)
      216 |       })

      at Object.timeSeriesData (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:213:17)

  ● GET /api/analytics/behavioral-insights/correlation › Time Series Data Validation › should validate academic scores are in range [0, 100]

    TypeError: Cannot read properties of undefined (reading 'timeSeriesData')

      225 |       const data = await response.json()
      226 |
    > 227 |       data.data.timeSeriesData.forEach((point: any) => {
          |                 ^
      228 |         expect(point.academicScore).toBeGreaterThanOrEqual(0)
      229 |         expect(point.academicScore).toBeLessThanOrEqual(100)
      230 |       })

      at Object.timeSeriesData (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:227:17)

  ● GET /api/analytics/behavioral-insights/correlation › Insights and Causation Warnings › should always include causation warning

    TypeError: Cannot read properties of undefined (reading 'insights')

      241 |       const data = await response.json()
      242 |
    > 243 |       expect(data.data.insights).toBeDefined()
          |                        ^
      244 |       expect(Array.isArray(data.data.insights)).toBe(true)
      245 |       expect(data.data.insights.length).toBeGreaterThan(0)
      246 |

      at Object.insights (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:243:24)

  ● GET /api/analytics/behavioral-insights/correlation › Insights and Causation Warnings › should include statistical significance insight

    TypeError: Cannot read properties of undefined (reading 'insights')

      259 |       const data = await response.json()
      260 |
    > 261 |       const hasSignificance = data.data.insights.some((insight: string) =>
          |                                         ^
      262 |         insight.toLowerCase().includes('statistically significant'),
      263 |       )
      264 |       expect(hasSignificance).toBe(true)

      at Object.insights (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:261:41)

  ● GET /api/analytics/behavioral-insights/correlation › Insights and Causation Warnings › should provide actionable insights

    TypeError: Cannot read properties of undefined (reading 'insights')

      273 |       const data = await response.json()
      274 |
    > 275 |       expect(data.data.insights.length).toBeGreaterThanOrEqual(3)
          |                        ^
      276 |     })
      277 |   })
      278 |

      at Object.insights (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:275:24)

  ● GET /api/analytics/behavioral-insights/correlation › Data Quality Metrics › should return data quality metrics

    TypeError: Cannot read properties of undefined (reading 'dataQuality')

      286 |       const data = await response.json()
      287 |
    > 288 |       expect(data.data.dataQuality).toBeDefined()
          |                        ^
      289 |       expect(data.data.dataQuality).toHaveProperty('sampleSize')
      290 |       expect(data.data.dataQuality).toHaveProperty('weeksOfData')
      291 |       expect(data.data.dataQuality).toHaveProperty('missingDataPoints')

      at Object.dataQuality (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:288:24)

  ● GET /api/analytics/behavioral-insights/correlation › Data Quality Metrics › should validate sample size matches time series data length

    TypeError: Cannot read properties of undefined (reading 'dataQuality')

      300 |       const data = await response.json()
      301 |
    > 302 |       expect(data.data.dataQuality.sampleSize).toBe(data.data.timeSeriesData.length)
          |                        ^
      303 |     })
      304 |   })
      305 |

      at Object.dataQuality (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:302:24)

  ● GET /api/analytics/behavioral-insights/correlation › Response Structure › should return success response with correct structure

    expect(received).toHaveProperty(path, value)

    Expected path: "success"

    Expected value: true
    Received value: false

      313 |       const data = await response.json()
      314 |
    > 315 |       expect(data).toHaveProperty('success', true)
          |                    ^
      316 |       expect(data).toHaveProperty('data')
      317 |       expect(data.data).toHaveProperty('coefficient')
      318 |       expect(data.data).toHaveProperty('pValue')

      at Object.toHaveProperty (src/app/api/analytics/behavioral-insights/correlation/__tests__/route.test.ts:315:20)

FAIL src/__tests__/components/review-card.test.tsx
  ● ReviewCard › Basic Rendering › should render weekly review card

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      83 |   describe('Basic Rendering', () => {
      84 |     it('should render weekly review card', () => {
    > 85 |       render(<ReviewCard review={mockReview} />)
         |             ^
      86 |
      87 |       expect(screen.getByText('Weekly Review')).toBeInTheDocument()
      88 |       expect(screen.getByText('EXCELLENT')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:85:13)

  ● ReviewCard › Basic Rendering › should render monthly review card

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      91 |     it('should render monthly review card', () => {
      92 |       const monthlyReview = { ...mockReview, period: 'MONTH' as const }
    > 93 |       render(<ReviewCard review={monthlyReview} />)
         |             ^
      94 |
      95 |       expect(screen.getByText('Monthly Review')).toBeInTheDocument()
      96 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:93:13)

  ● ReviewCard › Basic Rendering › should display date range correctly

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

       97 |
       98 |     it('should display date range correctly', () => {
    >  99 |       render(<ReviewCard review={mockReview} />)
          |             ^
      100 |
      101 |       // Check for formatted date range (format may vary by locale and timezone)
      102 |       // Using flexible regex to match date patterns

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:99:13)

  ● ReviewCard › Basic Rendering › should display success rating badge

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      105 |
      106 |     it('should display success rating badge', () => {
    > 107 |       render(<ReviewCard review={mockReview} />)
          |             ^
      108 |
      109 |       const badge = screen.getByText('EXCELLENT')
      110 |       expect(badge).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:107:13)

  ● ReviewCard › Summary Stats Display › should display missions completed count

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      115 |   describe('Summary Stats Display', () => {
      116 |     it('should display missions completed count', () => {
    > 117 |       render(<ReviewCard review={mockReview} />)
          |             ^
      118 |
      119 |       expect(screen.getByText('6')).toBeInTheDocument()
      120 |       expect(screen.getByText('missions')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:117:13)

  ● ReviewCard › Summary Stats Display › should display completion rate with correct color

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      122 |
      123 |     it('should display completion rate with correct color', () => {
    > 124 |       render(<ReviewCard review={mockReview} />)
          |             ^
      125 |
      126 |       const completionRate = screen.getByText('86%') // 85.7% rounded
      127 |       expect(completionRate).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:124:13)

  ● ReviewCard › Summary Stats Display › should display study time in hours

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      131 |
      132 |     it('should display study time in hours', () => {
    > 133 |       render(<ReviewCard review={mockReview} />)
          |             ^
      134 |
      135 |       expect(screen.getByText('6h')).toBeInTheDocument()
      136 |       expect(screen.getByText('360 min total')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:133:13)

  ● ReviewCard › Summary Stats Display › should display longest streak

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      138 |
      139 |     it('should display longest streak', () => {
    > 140 |       render(<ReviewCard review={mockReview} />)
          |             ^
      141 |
      142 |       const streakElements = screen.getAllByText('5')
      143 |       expect(streakElements.length).toBeGreaterThan(0)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:140:13)

  ● ReviewCard › Success Score Ratings › should show EXCELLENT for score >= 0.8

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      149 |     it('should show EXCELLENT for score >= 0.8', () => {
      150 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.85 } }
    > 151 |       render(<ReviewCard review={review} />)
          |             ^
      152 |
      153 |       expect(screen.getByText('EXCELLENT')).toBeInTheDocument()
      154 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:151:13)

  ● ReviewCard › Success Score Ratings › should show GOOD for score 0.7-0.79

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      156 |     it('should show GOOD for score 0.7-0.79', () => {
      157 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.75 } }
    > 158 |       render(<ReviewCard review={review} />)
          |             ^
      159 |
      160 |       expect(screen.getByText('GOOD')).toBeInTheDocument()
      161 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:158:13)

  ● ReviewCard › Success Score Ratings › should show FAIR for score 0.6-0.69

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      163 |     it('should show FAIR for score 0.6-0.69', () => {
      164 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.65 } }
    > 165 |       render(<ReviewCard review={review} />)
          |             ^
      166 |
      167 |       expect(screen.getByText('FAIR')).toBeInTheDocument()
      168 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:165:13)

  ● ReviewCard › Success Score Ratings › should show NEEDS IMPROVEMENT for score 0.5-0.59

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      170 |     it('should show NEEDS IMPROVEMENT for score 0.5-0.59', () => {
      171 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.55 } }
    > 172 |       render(<ReviewCard review={review} />)
          |             ^
      173 |
      174 |       expect(screen.getByText('NEEDS IMPROVEMENT')).toBeInTheDocument()
      175 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:172:13)

  ● ReviewCard › Success Score Ratings › should show POOR for score < 0.5

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      177 |     it('should show POOR for score < 0.5', () => {
      178 |       const review = { ...mockReview, summary: { ...mockReview.summary, avgSuccessScore: 0.45 } }
    > 179 |       render(<ReviewCard review={review} />)
          |             ^
      180 |
      181 |       expect(screen.getByText('POOR')).toBeInTheDocument()
      182 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:179:13)

  ● ReviewCard › Completion Rate Colors › should show green for rate >= 0.85

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      185 |   describe('Completion Rate Colors', () => {
      186 |     it('should show green for rate >= 0.85', () => {
    > 187 |       render(<ReviewCard review={mockReview} />)
          |             ^
      188 |
      189 |       const completionRate = screen.getByText('86%')
      190 |       expect(completionRate).toHaveClass('text-green-600') // >= 0.85 shows green

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:187:13)

  ● ReviewCard › Completion Rate Colors › should show yellow for rate 0.5-0.69

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      196 |         summary: { ...mockReview.summary, completionRate: 0.6 },
      197 |       }
    > 198 |       render(<ReviewCard review={review} />)
          |             ^
      199 |
      200 |       const completionRate = screen.getByText('60%')
      201 |       expect(completionRate).toHaveClass('text-yellow-600')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:198:13)

  ● ReviewCard › Completion Rate Colors › should show red for rate < 0.5

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      208 |         summary: { ...mockReview.summary, completionRate: 0.4 },
      209 |       }
    > 210 |       render(<ReviewCard review={review} />)
          |             ^
      211 |
      212 |       const completionRate = screen.getByText('40%')
      213 |       expect(completionRate).toHaveClass('text-red-600')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:210:13)

  ● ReviewCard › Completion Rate Colors › should show "Above target" for rate > 0.9

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      220 |         summary: { ...mockReview.summary, completionRate: 0.95 },
      221 |       }
    > 222 |       render(<ReviewCard review={review} />)
          |             ^
      223 |
      224 |       expect(screen.getByText('Above target')).toBeInTheDocument()
      225 |     })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:222:13)

  ● ReviewCard › Expand/Collapse Functionality › should initially be collapsed

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      228 |   describe('Expand/Collapse Functionality', () => {
      229 |     it('should initially be collapsed', () => {
    > 230 |       render(<ReviewCard review={mockReview} />)
          |             ^
      231 |
      232 |       // Expanded content should not be visible
      233 |       expect(screen.queryByText('Highlights')).not.toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:230:13)

  ● ReviewCard › Expand/Collapse Functionality › should expand when chevron button clicked

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      235 |
      236 |     it('should expand when chevron button clicked', () => {
    > 237 |       render(<ReviewCard review={mockReview} />)
          |             ^
      238 |
      239 |       const expandButton = screen.getByRole('button')
      240 |       fireEvent.click(expandButton)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:237:13)

  ● ReviewCard › Expand/Collapse Functionality › should collapse when clicked again

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      247 |
      248 |     it('should collapse when clicked again', () => {
    > 249 |       render(<ReviewCard review={mockReview} />)
          |             ^
      250 |
      251 |       const expandButton = screen.getByRole('button')
      252 |

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:249:13)

  ● ReviewCard › Expand/Collapse Functionality › should toggle chevron icon direction

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      261 |
      262 |     it('should toggle chevron icon direction', () => {
    > 263 |       render(<ReviewCard review={mockReview} />)
          |             ^
      264 |
      265 |       const expandButton = screen.getByRole('button')
      266 |

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:263:13)

  ● ReviewCard › Highlights Section › should display personal bests

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      276 |   describe('Highlights Section', () => {
      277 |     it('should display personal bests', () => {
    > 278 |       render(<ReviewCard review={mockReview} />)
          |             ^
      279 |       fireEvent.click(screen.getByRole('button')) // Expand
      280 |
      281 |       expect(screen.getByText('Completed 6 missions in a week - new record!')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:278:13)

  ● ReviewCard › Highlights Section › should display top objectives

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      284 |
      285 |     it('should display top objectives', () => {
    > 286 |       render(<ReviewCard review={mockReview} />)
          |             ^
      287 |       fireEvent.click(screen.getByRole('button')) // Expand
      288 |
      289 |       expect(screen.getByText('Top Objectives Completed')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:286:13)

  ● ReviewCard › Highlights Section › should limit top objectives to 3

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      306 |       }
      307 |
    > 308 |       render(<ReviewCard review={reviewWithManyObjectives} />)
          |             ^
      309 |       fireEvent.click(screen.getByRole('button')) // Expand
      310 |
      311 |       expect(screen.getByText('Objective 1')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:308:13)

  ● ReviewCard › Insights Section › should display improvements with correct styling

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      318 |   describe('Insights Section', () => {
      319 |     it('should display improvements with correct styling', () => {
    > 320 |       render(<ReviewCard review={mockReview} />)
          |             ^
      321 |       fireEvent.click(screen.getByRole('button')) // Expand
      322 |
      323 |       expect(screen.getByText('Improvements')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:320:13)

  ● ReviewCard › Insights Section › should display patterns detected

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      327 |
      328 |     it('should display patterns detected', () => {
    > 329 |       render(<ReviewCard review={mockReview} />)
          |             ^
      330 |       fireEvent.click(screen.getByRole('button')) // Expand
      331 |
      332 |       expect(screen.getByText('Patterns Detected')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:329:13)

  ● ReviewCard › Insights Section › should display concerns

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      337 |
      338 |     it('should display concerns', () => {
    > 339 |       render(<ReviewCard review={mockReview} />)
          |             ^
      340 |       fireEvent.click(screen.getByRole('button')) // Expand
      341 |
      342 |       expect(screen.getByText('Areas for Attention')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:339:13)

  ● ReviewCard › Recommendations Section › should display action items with priority badges

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      347 |   describe('Recommendations Section', () => {
      348 |     it('should display action items with priority badges', () => {
    > 349 |       render(<ReviewCard review={mockReview} />)
          |             ^
      350 |       fireEvent.click(screen.getByRole('button')) // Expand
      351 |
      352 |       expect(screen.getByText('HIGH')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:349:13)

  ● ReviewCard › Recommendations Section › should display reasons for recommendations

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      357 |
      358 |     it('should display reasons for recommendations', () => {
    > 359 |       render(<ReviewCard review={mockReview} />)
          |             ^
      360 |       fireEvent.click(screen.getByRole('button')) // Expand
      361 |
      362 |       expect(screen.getByText('Your best performance occurs during this time')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:359:13)

  ● ReviewCard › Recommendations Section › should show "Apply Recommendations" button when callback provided

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      366 |     it('should show "Apply Recommendations" button when callback provided', () => {
      367 |       const onApply = jest.fn()
    > 368 |       render(<ReviewCard review={mockReview} onApplyRecommendations={onApply} />)
          |             ^
      369 |       fireEvent.click(screen.getByRole('button')) // Expand
      370 |
      371 |       const applyButton = screen.getByText('Apply Recommendations')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:368:13)

  ● ReviewCard › Recommendations Section › should call onApplyRecommendations when button clicked

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      375 |     it('should call onApplyRecommendations when button clicked', () => {
      376 |       const onApply = jest.fn()
    > 377 |       render(<ReviewCard review={mockReview} onApplyRecommendations={onApply} />)
          |             ^
      378 |
      379 |       // Expand card
      380 |       const expandButton = screen.getAllByRole('button')[0]

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:377:13)

  ● ReviewCard › Recommendations Section › should not show apply button when no callback provided

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      389 |
      390 |     it('should not show apply button when no callback provided', () => {
    > 391 |       render(<ReviewCard review={mockReview} />)
          |             ^
      392 |       fireEvent.click(screen.getByRole('button')) // Expand
      393 |
      394 |       expect(screen.queryByText('Apply Recommendations')).not.toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:391:13)

  ● ReviewCard › Review Metadata › should display generation timestamp

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      398 |   describe('Review Metadata', () => {
      399 |     it('should display generation timestamp', () => {
    > 400 |       render(<ReviewCard review={mockReview} />)
          |             ^
      401 |       fireEvent.click(screen.getByRole('button')) // Expand
      402 |
      403 |       // Check for date (format may vary by locale)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:400:13)

  ● ReviewCard › Edge Cases › should handle review with no highlights

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      418 |       }
      419 |
    > 420 |       render(<ReviewCard review={minimalReview} />)
          |             ^
      421 |       fireEvent.click(screen.getByRole('button')) // Expand
      422 |
      423 |       // Should not render highlights section

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:420:13)

  ● ReviewCard › Edge Cases › should handle review with no insights

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      436 |       }
      437 |
    > 438 |       render(<ReviewCard review={minimalReview} />)
          |             ^
      439 |       fireEvent.click(screen.getByRole('button')) // Expand
      440 |
      441 |       // Should not render insights section

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:438:13)

  ● ReviewCard › Edge Cases › should handle review with no recommendations

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      452 |       }
      453 |
    > 454 |       render(<ReviewCard review={minimalReview} />)
          |             ^
      455 |       fireEvent.click(screen.getByRole('button')) // Expand
      456 |
      457 |       // Should not render recommendations section

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:454:13)

  ● ReviewCard › Edge Cases › should handle zero values correctly

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      478 |       }
      479 |
    > 480 |       render(<ReviewCard review={zeroReview} />)
          |             ^
      481 |
      482 |       expect(screen.getByText('0h')).toBeInTheDocument()
      483 |       expect(screen.getByText('0%')).toBeInTheDocument()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:480:13)

  ● ReviewCard › Edge Cases › should handle very long text gracefully

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      498 |       }
      499 |
    > 500 |       render(<ReviewCard review={longTextReview} />)
          |             ^
      501 |       fireEvent.click(screen.getByRole('button'))
      502 |
      503 |       // Component should render without errors

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:500:13)

  ● ReviewCard › Edge Cases › should handle invalid dates gracefully

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      514 |
      515 |       // Should not throw error
    > 516 |       render(<ReviewCard review={invalidDateReview} />)
          |             ^
      517 |       expect(screen.getByText('Weekly Review')).toBeInTheDocument()
      518 |     })
      519 |   })

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:516:13)

  ● ReviewCard › Accessibility › should have proper button roles

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      521 |   describe('Accessibility', () => {
      522 |     it('should have proper button roles', () => {
    > 523 |       render(<ReviewCard review={mockReview} />)
          |             ^
      524 |
      525 |       const buttons = screen.getAllByRole('button')
      526 |       expect(buttons.length).toBeGreaterThan(0)

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:523:13)

  ● ReviewCard › Accessibility › should support keyboard navigation

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      528 |
      529 |     it('should support keyboard navigation', () => {
    > 530 |       render(<ReviewCard review={mockReview} />)
          |             ^
      531 |
      532 |       const expandButton = screen.getByRole('button')
      533 |       expandButton.focus()

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:530:13)

  ● ReviewCard › Accessibility › should have semantic HTML structure

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      536 |
      537 |     it('should have semantic HTML structure', () => {
    > 538 |       const { container } = render(<ReviewCard review={mockReview} />)
          |                                   ^
      539 |
      540 |       // Check for proper card structure (shadcn Card component uses specific classes)
      541 |       const cardElement = container.querySelector('.rounded-xl.border')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:538:35)

  ● ReviewCard › Responsive Design › should use responsive grid for summary stats

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "jsdom" test environment.

    ReferenceError: document is not defined

      546 |   describe('Responsive Design', () => {
      547 |     it('should use responsive grid for summary stats', () => {
    > 548 |       const { container } = render(<ReviewCard review={mockReview} />)
          |                                   ^
      549 |
      550 |       const grid = container.querySelector('.grid')
      551 |       expect(grid).toHaveClass('grid-cols-2', 'md:grid-cols-4')

      at render (node_modules/@testing-library/react/dist/pure.js:257:5)
      at Object.<anonymous> (src/__tests__/components/review-card.test.tsx:548:35)

FAIL src/subsystems/behavioral-analytics/__tests__/academic-performance-integration.test.ts
  ● Test suite failed to run

    Cannot find module 'vitest' from 'src/subsystems/behavioral-analytics/__tests__/academic-performance-integration.test.ts'

       8 | import { describe, it, expect, beforeEach, vi } from 'vitest'
       9 | import { AcademicPerformanceIntegration } from '../academic-performance-integration'
    > 10 | import { prisma } from '@/lib/db'
         |                 ^
      11 |
      12 | // Mock Prisma
      13 | vi.mock('@/lib/db', () => ({

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (src/subsystems/behavioral-analytics/__tests__/academic-performance-integration.test.ts:10:17)

FAIL src/subsystems/behavioral-analytics/__tests__/ab-testing-framework.test.ts
  ● ABTestingFramework › recordMetrics › should record metrics for user assignment

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      211 |       }
      212 |
    > 213 |       ;(prisma.experimentAssignment.update as jest.Mock).mockResolvedValue({
          |                                                          ^
      214 |         userId,
      215 |         experimentId,
      216 |         metrics,

      at Object.mockResolvedValue (src/subsystems/behavioral-analytics/__tests__/ab-testing-framework.test.ts:213:58)

  ● ABTestingFramework › analyzeExperiment › should calculate confidence intervals correctly

    expect(received).toBeLessThanOrEqual(expected)

    Expected: <= 0.15
    Received:    0.15000000000000002

      429 |       // CI should contain the true difference (0.85 - 0.70 = 0.15)
      430 |       const trueDiff = 0.15
    > 431 |       expect(analysis.statistical?.confidenceInterval.lower).toBeLessThanOrEqual(trueDiff)
          |                                                              ^
      432 |       expect(analysis.statistical?.confidenceInterval.upper).toBeGreaterThanOrEqual(trueDiff)
      433 |     })
      434 |

      at Object.toBeLessThanOrEqual (src/subsystems/behavioral-analytics/__tests__/ab-testing-framework.test.ts:431:62)

FAIL src/subsystems/behavioral-analytics/__tests__/goal-manager.test.ts
  ● Test suite failed to run

    Cannot find module 'vitest' from 'src/subsystems/behavioral-analytics/__tests__/goal-manager.test.ts'

       6 | import { describe, it, expect, beforeEach, vi } from 'vitest'
       7 | import { GoalManager } from '../goal-manager'
    >  8 | import { prisma } from '@/lib/db'
         |                 ^
       9 |
      10 | // Mock Prisma
      11 | vi.mock('@/lib/db', () => ({

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (src/subsystems/behavioral-analytics/__tests__/goal-manager.test.ts:8:17)

FAIL src/subsystems/behavioral-analytics/__tests__/recommendations-engine.test.ts
  ● Test suite failed to run

    Cannot find module 'vitest' from 'src/subsystems/behavioral-analytics/__tests__/recommendations-engine.test.ts'

       6 | import { describe, it, expect, beforeEach, vi } from 'vitest'
       7 | import { RecommendationsEngine } from '../recommendations-engine'
    >  8 | import { prisma } from '@/lib/db'
         |                 ^
       9 |
      10 | // Mock Prisma
      11 | vi.mock('@/lib/db', () => ({

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (src/subsystems/behavioral-analytics/__tests__/recommendations-engine.test.ts:8:17)

FAIL __tests__/api/analytics/struggle-reduction.test.ts
  ● GET /api/analytics/struggle-reduction › Success Cases › should return struggle reduction metrics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      18 |       const data = await response.json()
      19 |
    > 20 |       expect(response.status).toBe(200)
         |                               ^
      21 |       expect(data.success).toBe(true)
      22 |       expect(data.baselineRate).toBeDefined()
      23 |       expect(data.currentRate).toBeDefined()

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:20:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should return metrics with correct data types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      33 |       const data = await response.json()
      34 |
    > 35 |       expect(response.status).toBe(200)
         |                               ^
      36 |       expect(typeof data.baselineRate).toBe('number')
      37 |       expect(typeof data.currentRate).toBe('number')
      38 |       expect(typeof data.reductionPercentage).toBe('number')

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:35:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should include timeline data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      47 |       const data = await response.json()
      48 |
    > 49 |       expect(response.status).toBe(200)
         |                               ^
      50 |       expect(data.timeline.length).toBeGreaterThan(0)
      51 |       expect(data.timeline[0]).toHaveProperty('week')
      52 |       expect(data.timeline[0]).toHaveProperty('struggleRate')

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:49:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should include intervention effectiveness data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      59 |       const data = await response.json()
      60 |
    > 61 |       expect(response.status).toBe(200)
         |                               ^
      62 |       expect(data.interventionEffectiveness.length).toBeGreaterThan(0)
      63 |       expect(data.interventionEffectiveness[0]).toHaveProperty('type')
      64 |       expect(data.interventionEffectiveness[0]).toHaveProperty('applicationsCount')

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:61:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should handle period query parameter - week

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      74 |       const data = await response.json()
      75 |
    > 76 |       expect(response.status).toBe(200)
         |                               ^
      77 |       expect(data.success).toBe(true)
      78 |       expect(data.period).toBe('week')
      79 |     })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:76:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should handle period query parameter - month

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      87 |       const data = await response.json()
      88 |
    > 89 |       expect(response.status).toBe(200)
         |                               ^
      90 |       expect(data.period).toBe('month')
      91 |     })
      92 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:89:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should handle period query parameter - all

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

       99 |       const data = await response.json()
      100 |
    > 101 |       expect(response.status).toBe(200)
          |                               ^
      102 |       expect(data.period).toBe('all')
      103 |     })
      104 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:101:31)

  ● GET /api/analytics/struggle-reduction › Success Cases › should pass userId query parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      111 |       const data = await response.json()
      112 |
    > 113 |       expect(response.status).toBe(200)
          |                               ^
      114 |       expect(data.success).toBe(true)
      115 |     })
      116 |   })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:113:31)

  ● GET /api/analytics/struggle-reduction › Error Cases › should handle 404 user not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 503

      125 |       const data = await response.json()
      126 |
    > 127 |       expect(response.status).toBe(404)
          |                               ^
      128 |       expect(data.detail).toBe('User not found')
      129 |     })
      130 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:127:31)

  ● GET /api/analytics/struggle-reduction › Error Cases › should handle 422 insufficient data

    expect(received).toBe(expected) // Object.is equality

    Expected: 422
    Received: 503

      144 |       const data = await response.json()
      145 |
    > 146 |       expect(response.status).toBe(422)
          |                               ^
      147 |       expect(data.detail).toContain('Insufficient data')
      148 |     })
      149 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:146:31)

  ● GET /api/analytics/struggle-reduction › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      158 |       const data = await response.json()
      159 |
    > 160 |       expect(response.status).toBe(500)
          |                               ^
      161 |       expect(data.detail).toBe('Failed to calculate reduction')
      162 |     })
      163 |

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:160:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should return rates within valid ranges (0-1)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      197 |       const data = await response.json()
      198 |
    > 199 |       expect(response.status).toBe(200)
          |                               ^
      200 |       expect(data.baselineRate).toBeGreaterThanOrEqual(0)
      201 |       expect(data.baselineRate).toBeLessThanOrEqual(1)
      202 |       expect(data.currentRate).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:199:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should show improvement (current rate less than baseline)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      210 |       const data = await response.json()
      211 |
    > 212 |       expect(response.status).toBe(200)
          |                               ^
      213 |       expect(data.currentRate).toBeLessThan(data.baselineRate)
      214 |       expect(data.reductionPercentage).toBeGreaterThan(0)
      215 |     })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:212:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should have timeline with decreasing struggle rates

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      221 |       const data = await response.json()
      222 |
    > 223 |       expect(response.status).toBe(200)
          |                               ^
      224 |       data.timeline.forEach((point: { week: number; struggleRate: number }) => {
      225 |         expect(point.struggleRate).toBeGreaterThanOrEqual(0)
      226 |         expect(point.struggleRate).toBeLessThanOrEqual(1)

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:223:31)

  ● GET /api/analytics/struggle-reduction › Metric Validation › should have intervention effectiveness within valid range

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      239 |       const data = await response.json()
      240 |
    > 241 |       expect(response.status).toBe(200)
          |                               ^
      242 |       data.interventionEffectiveness.forEach(
      243 |         (intervention: { type: string; applicationsCount: number; successRate: number }) => {
      244 |           expect(intervention.applicationsCount).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:241:31)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      258 |       const response = await GET(request)
      259 |
    > 260 |       expect(response.status).toBe(200)
          |                               ^
      261 |     })
      262 |
      263 |     it('should handle invalid period parameter gracefully', async () => {

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:260:31)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle invalid period parameter gracefully

    expect(received).toContain(expected) // indexOf

    Expected value: 503
    Received array: [200, 400]

      269 |
      270 |       // Should either return default or handle gracefully
    > 271 |       expect([200, 400]).toContain(response.status)
          |                          ^
      272 |     })
      273 |
      274 |     it('should handle concurrent requests', async () => {

      at Object.toContain (__tests__/api/analytics/struggle-reduction.test.ts:271:26)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle concurrent requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      280 |
      281 |       responses.forEach((response) => {
    > 282 |         expect(response.status).toBe(200)
          |                                 ^
      283 |       })
      284 |     })
      285 |

      at toBe (__tests__/api/analytics/struggle-reduction.test.ts:282:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (__tests__/api/analytics/struggle-reduction.test.ts:281:17)

  ● GET /api/analytics/struggle-reduction › Edge Cases › should handle different period values correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      295 |         const data = await response.json()
      296 |
    > 297 |         expect(response.status).toBe(200)
          |                                 ^
      298 |         expect(data.period).toBe(period)
      299 |       }
      300 |     })

      at Object.toBe (__tests__/api/analytics/struggle-reduction.test.ts:297:33)

FAIL __tests__/api/analytics/model-performance.test.ts
  ● GET /api/analytics/model-performance › Success Cases › should return model performance metrics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      18 |       const data = await response.json()
      19 |
    > 20 |       expect(response.status).toBe(200)
         |                               ^
      21 |       expect(data.success).toBe(true)
      22 |       expect(data.accuracy).toBeDefined()
      23 |       expect(data.precision).toBeDefined()

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:20:31)

  ● GET /api/analytics/model-performance › Success Cases › should return metrics with correct data types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      33 |       const data = await response.json()
      34 |
    > 35 |       expect(response.status).toBe(200)
         |                               ^
      36 |       expect(typeof data.accuracy).toBe('number')
      37 |       expect(typeof data.precision).toBe('number')
      38 |       expect(typeof data.recall).toBe('number')

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:35:31)

  ● GET /api/analytics/model-performance › Success Cases › should include trend data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      48 |       const data = await response.json()
      49 |
    > 50 |       expect(response.status).toBe(200)
         |                               ^
      51 |       expect(Array.isArray(data.trend)).toBe(true)
      52 |       expect(data.trend.length).toBeGreaterThan(0)
      53 |       expect(data.trend[0]).toHaveProperty('date')

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:50:31)

  ● GET /api/analytics/model-performance › Success Cases › should include lastUpdated timestamp

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      61 |       const data = await response.json()
      62 |
    > 63 |       expect(response.status).toBe(200)
         |                               ^
      64 |       expect(data.lastUpdated).toBeDefined()
      65 |       expect(typeof data.lastUpdated).toBe('string')
      66 |       expect(new Date(data.lastUpdated).toString()).not.toBe('Invalid Date')

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:63:31)

  ● GET /api/analytics/model-performance › Success Cases › should pass userId query parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      75 |       const data = await response.json()
      76 |
    > 77 |       expect(response.status).toBe(200)
         |                               ^
      78 |       expect(data.success).toBe(true)
      79 |     })
      80 |   })

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:77:31)

  ● GET /api/analytics/model-performance › Error Cases › should handle 404 user not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 503

      89 |       const data = await response.json()
      90 |
    > 91 |       expect(response.status).toBe(404)
         |                               ^
      92 |       expect(data.detail).toBe('User not found')
      93 |     })
      94 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:91:31)

  ● GET /api/analytics/model-performance › Error Cases › should handle 422 insufficient data

    expect(received).toBe(expected) // Object.is equality

    Expected: 422
    Received: 503

      108 |       const data = await response.json()
      109 |
    > 110 |       expect(response.status).toBe(422)
          |                               ^
      111 |       expect(data.detail).toContain('Insufficient data')
      112 |     })
      113 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:110:31)

  ● GET /api/analytics/model-performance › Error Cases › should handle 500 internal server error

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 503

      122 |       const data = await response.json()
      123 |
    > 124 |       expect(response.status).toBe(500)
          |                               ^
      125 |       expect(data.detail).toBe('Failed to calculate metrics')
      126 |     })
      127 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:124:31)

  ● GET /api/analytics/model-performance › Metric Validation › should return metrics within valid ranges (0-1)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      161 |       const data = await response.json()
      162 |
    > 163 |       expect(response.status).toBe(200)
          |                               ^
      164 |       expect(data.accuracy).toBeGreaterThanOrEqual(0)
      165 |       expect(data.accuracy).toBeLessThanOrEqual(1)
      166 |       expect(data.precision).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:163:31)

  ● GET /api/analytics/model-performance › Metric Validation › should have positive data points count

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      178 |       const data = await response.json()
      179 |
    > 180 |       expect(response.status).toBe(200)
          |                               ^
      181 |       expect(data.dataPoints).toBeGreaterThan(0)
      182 |     })
      183 |

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:180:31)

  ● GET /api/analytics/model-performance › Metric Validation › should have trend data with valid dates

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      188 |       const data = await response.json()
      189 |
    > 190 |       expect(response.status).toBe(200)
          |                               ^
      191 |       data.trend.forEach((point: { date: string; accuracy: number }) => {
      192 |         expect(new Date(point.date).toString()).not.toBe('Invalid Date')
      193 |         expect(point.accuracy).toBeGreaterThanOrEqual(0)

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:190:31)

  ● GET /api/analytics/model-performance › Edge Cases › should handle special characters in userId

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      205 |       const response = await GET(request)
      206 |
    > 207 |       expect(response.status).toBe(200)
          |                               ^
      208 |     })
      209 |
      210 |     it('should handle concurrent requests', async () => {

      at Object.toBe (__tests__/api/analytics/model-performance.test.ts:207:31)

  ● GET /api/analytics/model-performance › Edge Cases › should handle concurrent requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 503

      216 |
      217 |       responses.forEach((response) => {
    > 218 |         expect(response.status).toBe(200)
          |                                 ^
      219 |       })
      220 |     })
      221 |   })

      at toBe (__tests__/api/analytics/model-performance.test.ts:218:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (__tests__/api/analytics/model-performance.test.ts:217:17)

FAIL __tests__/subsystems/behavioral-analytics/study-intensity-modulator.test.ts
  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'fn')

       8 |
       9 | // Mock fetch for Story 5.4 API integration
    > 10 | global.fetch = vi.fn()
         |                   ^
      11 |
      12 | // Mock dependencies
      13 | vi.mock('@/lib/db', () => ({

      at Object.fn (__tests__/subsystems/behavioral-analytics/study-intensity-modulator.test.ts:10:19)

FAIL __tests__/api/analytics/predictions-feedback.test.ts
  ● Test suite failed to run

    Cannot find module '../../../setup' from '__tests__/api/analytics/predictions-feedback.test.ts'

      10 | import { server, createErrorHandler, create503Handler } from '../../../setup'
      11 |
    > 12 | describe('POST /api/analytics/predictions/[id]/feedback', () => {
         |                ^
      13 |   describe('Success Cases', () => {
      14 |     it('should submit prediction feedback successfully', async () => {
      15 |       const request = new NextRequest(

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (__tests__/api/analytics/predictions-feedback.test.ts:12:16)

FAIL src/app/api/analytics/behavioral-insights/__tests__/recommendations.test.ts
  ● GET /api/analytics/behavioral-insights/recommendations › should return 400 for invalid limit parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      141 |     const response = await GET(request)
      142 |
    > 143 |     expect(response.status).toBe(400)
          |                             ^
      144 |   })
      145 |
      146 |   it('should return 400 for missing userId parameter', async () => {

      at Object.toBe (src/app/api/analytics/behavioral-insights/__tests__/recommendations.test.ts:143:29)

  ● GET /api/analytics/behavioral-insights/recommendations › should return 400 for missing userId parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      151 |     const response = await GET(request)
      152 |
    > 153 |     expect(response.status).toBe(400)
          |                             ^
      154 |   })
      155 | })
      156 |

      at Object.toBe (src/app/api/analytics/behavioral-insights/__tests__/recommendations.test.ts:153:29)

FAIL __tests__/subsystems/behavioral-analytics/study-time-recommender.test.ts
  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'mock')

      10 |
      11 | // Mock dependencies
    > 12 | vi.mock('@/lib/db', () => ({
         |    ^
      13 |   prisma: {
      14 |     userLearningProfile: {
      15 |       findUnique: vi.fn(),

      at Object.mock (__tests__/subsystems/behavioral-analytics/study-time-recommender.test.ts:12:4)

FAIL __tests__/api/analytics/interventions-apply.test.ts
  ● Test suite failed to run

    Cannot find module '../../../setup' from '__tests__/api/analytics/interventions-apply.test.ts'

      10 | import { server, createErrorHandler, create503Handler } from '../../../setup'
      11 |
    > 12 | describe('POST /api/analytics/interventions/[id]/apply', () => {
         |                ^
      13 |   describe('Success Cases', () => {
      14 |     it('should apply intervention successfully', async () => {
      15 |       const request = new NextRequest(

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/index.js:863:11)
      at Object.<anonymous> (__tests__/api/analytics/interventions-apply.test.ts:12:16)

FAIL __tests__/performance/story-5.4-benchmarks.test.ts
  ● Story 5.4 Performance Benchmarks › Benchmark 4: Database Query Optimization › Cognitive load calculation minimizes database writes

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      435 |
      436 |       // Should only create 1 metric record per calculation
    > 437 |       expect(createSpy).toHaveBeenCalledTimes(1)
          |                         ^
      438 |     })
      439 |   })
      440 |

      at Object.toHaveBeenCalledTimes (__tests__/performance/story-5.4-benchmarks.test.ts:437:25)

  ● Story 5.4 Performance Benchmarks › Benchmark 5: Edge Cases & Stress Scenarios › Handles extreme load scenarios efficiently

    expect(received).toBeGreaterThan(expected)

    Expected: > 70
    Received:   50

      500 |
      501 |       expect(duration).toBeLessThan(PERFORMANCE_THRESHOLDS.COGNITIVE_LOAD_CALCULATION)
    > 502 |       expect(result.loadScore).toBeGreaterThan(70) // Should detect overload
          |                                ^
      503 |     })
      504 |
      505 |     test('Concurrent assessments do not block each other', async () => {

      at Object.toBeGreaterThan (__tests__/performance/story-5.4-benchmarks.test.ts:502:32)


Test Suites: 23 failed, 6 passed, 29 total
Tests:       138 failed, 254 passed, 392 total
Snapshots:   0 total
Time:        16.236 s, estimated 17 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
