// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// ============================================
// SUBSYSTEM 1: Content Processing Pipeline
// ============================================

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Mission preferences (Story 2.4 Task 8)
  defaultMissionMinutes Int     @default(50) // 30-90 minute range
  missionDifficulty     String  @default("AUTO") // AUTO, EASY, MODERATE, CHALLENGING
  preferredStudyTime    String? // HH:MM format (e.g., "07:00", "18:00")
  autoGenerateMissions  Boolean @default(true)

  // Performance tracking preferences (Story 2.2 Task 8)
  performanceTrackingEnabled Boolean @default(true)
  includeInAnalytics         Boolean @default(true)

  // Story 2.6: Mission adaptation tracking
  lastMissionAdaptation DateTime? // Throttle adaptations to max 1/week

  // Story 5.1: Behavioral pattern analysis preferences
  behavioralAnalysisEnabled     Boolean @default(true)
  learningStyleProfilingEnabled Boolean @default(true)
  shareAnonymizedPatterns       Boolean @default(false)

  // Story 4.4: Peer calibration comparison privacy opt-in
  sharePeerCalibrationData Boolean @default(false)

  // Relations
  courses                  Course[]
  lectures                 Lecture[]
  studySessions            StudySession[]
  missions                 Mission[]
  reviews                  Review[]
  exams                    Exam[]
  coursePriorities         CoursePriority[]
  streak                   Streak?
  achievements             Achievement[]
  studyGoals               StudyGoal[]
  missionStreak            MissionStreak?
  missionReviews           MissionReview[]
  scenarioResponses        ScenarioResponse[]
  clinicalReasoningMetrics ClinicalReasoningMetric[]

  @@map("users")
}

model Course {
  id        String   @id @default(cuid())
  userId    String
  name      String // "Gross Anatomy (ANAT 505)"
  code      String? // "ANAT 505"
  term      String? // "Fall 2025"
  color     String? // OKLCH color for visual organization (e.g., "oklch(0.7 0.15 230)")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectures         Lecture[]
  cards            Card[]
  exams            Exam[]
  coursePriorities CoursePriority[]

  @@index([userId])
  @@map("courses")
}

model Lecture {
  id               String           @id @default(cuid())
  userId           String
  courseId         String
  title            String
  fileName         String
  fileUrl          String // Local path or Supabase URL
  fileSize         Int
  processingStatus ProcessingStatus @default(PENDING)
  uploadedAt       DateTime         @default(now())
  processedAt      DateTime?

  // Processing progress tracking
  processingProgress    Int       @default(0) // 0-100 percentage
  totalPages            Int? // Total number of pages to process
  processedPages        Int       @default(0) // Number of pages processed
  processingStartedAt   DateTime? // When processing started
  estimatedCompletionAt DateTime? // ETA for completion

  // Metadata
  weekNumber Int?
  topicTags  String[]

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contentChunks      ContentChunk[]
  learningObjectives LearningObjective[]
  cards              Card[]

  @@index([userId])
  @@index([courseId])
  @@index([processingStatus])
  @@map("lectures")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model ContentChunk {
  id         String                       @id @default(cuid())
  lectureId  String
  content    String                       @db.Text
  embedding  Unsupported("vector(1536)")? // gemini-embedding-001 (output_dimensionality: 1536)
  chunkIndex Int // Order within lecture
  pageNumber Int?
  createdAt  DateTime                     @default(now())

  // Relations
  lecture Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@index([lectureId])
  @@map("content_chunks")
}

model LearningObjective {
  id            String              @id @default(cuid())
  lectureId     String
  objective     String              @db.Text
  complexity    ObjectiveComplexity @default(INTERMEDIATE)
  pageStart     Int?
  pageEnd       Int?
  isHighYield   Boolean             @default(false)
  boardExamTags String[] // USMLE Step 1/2/3, COMLEX Level 1/2/3, subject tags
  extractedBy   String              @default("gpt-5")
  createdAt     DateTime            @default(now())

  // Performance tracking fields (Story 2.2)
  masteryLevel     MasteryLevel @default(NOT_STARTED)
  totalStudyTimeMs Int          @default(0)
  lastStudiedAt    DateTime?
  weaknessScore    Float        @default(0.5) // 0.0-1.0, higher = weaker

  // Relations
  lecture              Lecture                 @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  cards                Card[]
  prerequisites        ObjectivePrerequisite[] @relation("Objective")
  dependents           ObjectivePrerequisite[] @relation("Prerequisite")
  performanceMetrics   PerformanceMetric[]
  priorityFeedback     PriorityFeedback[]
  comprehensionMetrics ComprehensionMetric[]
  validationPrompts    ValidationPrompt[]
  clinicalScenarios    ClinicalScenario[]
  controlledFailures   ControlledFailure[]
  masteryVerifications MasteryVerification[]

  @@index([lectureId])
  @@index([isHighYield])
  @@index([complexity])
  @@index([masteryLevel])
  @@index([weaknessScore])
  @@map("learning_objectives")
}

enum ObjectiveComplexity {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum MasteryLevel {
  NOT_STARTED
  BEGINNER
  INTERMEDIATE
  ADVANCED
  MASTERED
}

model ObjectivePrerequisite {
  id             String @id @default(cuid())
  objectiveId    String
  prerequisiteId String
  strength       Float  @default(1.0)

  // Relations
  objective    LearningObjective @relation("Objective", fields: [objectiveId], references: [id], onDelete: Cascade)
  prerequisite LearningObjective @relation("Prerequisite", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@unique([objectiveId, prerequisiteId])
  @@index([objectiveId])
  @@index([prerequisiteId])
  @@map("objective_prerequisites")
}

// ============================================
// SUBSYSTEM 2: Learning Engine
// ============================================

model Mission {
  id                       String        @id @default(cuid())
  userId                   String
  date                     DateTime      @default(now())
  status                   MissionStatus @default(PENDING)
  estimatedMinutes         Int
  completedAt              DateTime?
  actualMinutes            Int? // Tracked during study session
  completedObjectivesCount Int           @default(0)

  // Mission content
  // objectives: JSON array of { objectiveId, estimatedMinutes, completed, completedAt?, notes? }
  objectives      Json // Array of MissionObjective objects
  reviewCardCount Int  @default(0) // Number of cards due for review
  newContentCount Int  @default(0) // Number of new concepts to learn

  // Story 2.6: Mission analytics fields
  successScore     Float? // 0.0-1.0 composite success metric (Task 9)
  difficultyRating Int? // User feedback 1-5 (Task 4)

  // Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySessions StudySession[]
  feedback      MissionFeedback[]

  @@index([userId])
  @@index([date])
  @@index([status])
  @@map("missions")
}

enum MissionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

model Card {
  id          String   @id @default(cuid())
  courseId    String
  lectureId   String?
  objectiveId String?
  front       String   @db.Text
  back        String   @db.Text
  cardType    CardType @default(BASIC)
  createdAt   DateTime @default(now())

  // FSRS state
  difficulty     Float     @default(0)
  stability      Float     @default(0)
  retrievability Float     @default(0)
  lastReviewedAt DateTime?
  nextReviewAt   DateTime?
  reviewCount    Int       @default(0)
  lapseCount     Int       @default(0)

  // Relations
  course    Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture   Lecture?           @relation(fields: [lectureId], references: [id], onDelete: SetNull)
  objective LearningObjective? @relation(fields: [objectiveId], references: [id], onDelete: SetNull)
  reviews   Review[]

  @@index([courseId])
  @@index([nextReviewAt])
  @@map("cards")
}

enum CardType {
  BASIC
  CLOZE
  CLINICAL_REASONING
}

model Review {
  id          String       @id @default(cuid())
  userId      String
  cardId      String
  sessionId   String?
  rating      ReviewRating
  timeSpentMs Int
  reviewedAt  DateTime     @default(now())

  // FSRS data captured at review time
  difficultyBefore Float
  stabilityBefore  Float
  difficultyAfter  Float
  stabilityAfter   Float

  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  card    Card          @relation(fields: [cardId], references: [id], onDelete: Cascade)
  session StudySession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([cardId])
  @@index([reviewedAt])
  @@map("reviews")
}

enum ReviewRating {
  AGAIN // 1 - Complete lapse
  HARD // 2 - Difficult recall
  GOOD // 3 - Correct with effort
  EASY // 4 - Perfect recall
}

model StudySession {
  id          String    @id @default(cuid())
  userId      String
  missionId   String?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  durationMs  Int?

  // Session stats
  reviewsCompleted Int @default(0)
  newCardsStudied  Int @default(0)

  // Session notes for reflection (AC #7)
  sessionNotes String? @db.Text

  // Mission integration fields (Story 2.5 Task 1)
  currentObjectiveIndex Int   @default(0) // 0-based index of current objective in mission
  missionObjectives     Json? // Snapshot of mission objectives at session start for state recovery
  objectiveCompletions  Json? // Array of { objectiveId, completedAt, timeSpentMs, selfAssessment, confidenceRating, notes? }

  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission             Mission?             @relation(fields: [missionId], references: [id], onDelete: SetNull)
  reviews             Review[]
  validationResponses ValidationResponse[]
  scenarioResponses   ScenarioResponse[]

  @@index([userId])
  @@index([startedAt])
  @@map("study_sessions")
}

// ============================================
// SUBSYSTEM 3: Knowledge Graph & Search
// ============================================

model Concept {
  id          String                       @id @default(cuid())
  name        String                       @unique
  description String?                      @db.Text
  category    String? // "anatomy", "physiology", "pathology"
  embedding   Unsupported("vector(1536)")? // gemini-embedding-001 (output_dimensionality: 1536)
  createdAt   DateTime                     @default(now())

  // Relations
  relatedFrom ConceptRelationship[] @relation("ConceptFrom")
  relatedTo   ConceptRelationship[] @relation("ConceptTo")

  @@index([category])
  @@map("concepts")
}

model ConceptRelationship {
  id            String           @id @default(cuid())
  fromConceptId String
  toConceptId   String
  relationship  RelationshipType
  strength      Float            @default(1.0) // 0.0 to 1.0
  createdAt     DateTime         @default(now())

  // Relations
  fromConcept Concept @relation("ConceptFrom", fields: [fromConceptId], references: [id], onDelete: Cascade)
  toConcept   Concept @relation("ConceptTo", fields: [toConceptId], references: [id], onDelete: Cascade)

  @@unique([fromConceptId, toConceptId, relationship])
  @@index([fromConceptId])
  @@index([toConceptId])
  @@map("concept_relationships")
}

enum RelationshipType {
  PREREQUISITE // fromConcept is prerequisite for toConcept
  RELATED // General association
  INTEGRATED // Cross-course integration
  CLINICAL // Clinical application
}

// ============================================
// SUBSYSTEM 4: Understanding Validation
// ============================================

model ValidationPrompt {
  id               String     @id @default(cuid())
  promptText       String     @db.Text
  promptType       PromptType
  conceptName      String
  expectedCriteria String[] // Key points expected in answer
  createdAt        DateTime   @default(now())

  // Story 4.1 Task 1.1: Prompt variation metadata
  promptData Json? // {templateType: "direct" | "scenario" | "teaching", variation: string, seed: number}

  // Story 4.1: Link to learning objective for context
  objectiveId String?

  // Story 4.5 Task 1: Adaptive questioning fields
  difficultyLevel     Int       @default(50) // 0-100 scale for adaptive difficulty
  discriminationIndex Float? // Item Response Theory discrimination parameter (calculated after ≥20 responses)
  timesUsed           Int       @default(0) // Track usage for question rotation
  lastUsedAt          DateTime? // Enforce 2-week cooldown period

  // Relations
  responses         ValidationResponse[]
  learningObjective LearningObjective?   @relation(fields: [objectiveId], references: [id], onDelete: SetNull)

  @@index([conceptName])
  @@index([objectiveId])
  @@index([createdAt])
  @@index([difficultyLevel]) // Query questions by difficulty for adaptive selection
  @@index([lastUsedAt]) // Query unused questions with cooldown enforcement
  @@map("validation_prompts")
}

enum PromptType {
  EXPLAIN_TO_PATIENT
  CLINICAL_REASONING
  CONTROLLED_FAILURE
}

// Story 4.3: Emotion tagging for controlled failure memory anchoring
enum EmotionTag {
  SURPRISE
  CONFUSION
  FRUSTRATION
  AHA_MOMENT
}

// Story 4.2: Clinical Reasoning Scenarios
enum ScenarioType {
  DIAGNOSIS
  MANAGEMENT
  DIFFERENTIAL
  COMPLICATIONS
}

model ClinicalScenario {
  id             String       @id @default(cuid())
  objectiveId    String
  scenarioType   ScenarioType
  difficulty     String // BASIC, INTERMEDIATE, ADVANCED
  caseText       Json // Multi-stage case structure
  boardExamTopic String?
  createdAt      DateTime     @default(now())

  objective LearningObjective  @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  responses ScenarioResponse[]

  @@index([objectiveId])
  @@index([boardExamTopic])
  @@index([createdAt])
  @@map("clinical_scenarios")
}

model ScenarioResponse {
  id               String   @id @default(cuid())
  scenarioId       String
  userId           String
  sessionId        String?
  userChoices      Json // User selections at each stage
  userReasoning    String   @db.Text
  score            Int // Overall score 0-100
  competencyScores Json // { dataGathering, diagnosis, management, clinicalReasoning }
  timeSpent        Int // seconds
  respondedAt      DateTime @default(now())

  scenario ClinicalScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  session  StudySession?    @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([scenarioId])
  @@index([userId])
  @@index([respondedAt])
  @@map("scenario_responses")
}

model ClinicalReasoningMetric {
  id               String   @id @default(cuid())
  userId           String
  scenarioType     String
  competencyScores Json // { dataGathering, diagnosis, management, clinicalReasoning }
  boardExamTopic   String?
  date             DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([scenarioType])
  @@index([boardExamTopic])
  @@map("clinical_reasoning_metrics")
}

model ValidationResponse {
  id           String   @id @default(cuid())
  promptId     String
  sessionId    String?
  userId       String // User who submitted the response
  userAnswer   String   @db.Text
  aiEvaluation String   @db.Text
  score        Float // 0.0 to 1.0
  confidence   Float? // Legacy field (Float), kept for backward compatibility
  respondedAt  DateTime @default(now())

  // Story 4.1 Task 1.2: Comprehension validation fields
  confidenceLevel  Int? // 1-5 scale (new standard for comprehension validation)
  calibrationDelta Float? // confidenceNormalized - (score * 100)
  detailedFeedback Json? // {subscores: {terminology, relationships, application, clarity}, strengths: string[], gaps: string[], calibrationNote: string}
  skipped          Boolean @default(false) // Track if user skipped the prompt

  // Story 4.3 Task 1: Controlled failure tracking fields
  isControlledFailure Boolean @default(false) // Marks if this was a controlled failure challenge
  retryAttemptNumber  Int? // Tracks which retry attempt this is (1, 2, 3, etc.)

  // Story 4.4 Task 1: Confidence calibration tracking fields
  preAssessmentConfidence  Int? // 1-5 scale captured BEFORE seeing assessment details
  postAssessmentConfidence Int? // 1-5 scale captured AFTER seeing assessment but BEFORE submitting
  confidenceShift          Int? // Calculated: postAssessmentConfidence - preAssessmentConfidence
  confidenceRationale      String? @db.Text // User's explanation for confidence level
  reflectionNotes          String? @db.Text // Metacognitive reflection response
  calibrationCategory      CalibrationCategory? // OVERCONFIDENT, UNDERCONFIDENT, CALIBRATED

  // Story 4.5 Task 1: Adaptive questioning difficulty tracking
  initialDifficulty      Int? // Difficulty level when question was presented (0-100)
  adjustedDifficulty     Int? // Difficulty level after response (for next question)
  difficultyChangeReason String? @db.Text // Explanation for difficulty adjustment (e.g., "Score 90% - increased difficulty")
  isFollowUpQuestion     Boolean @default(false) // Marks if this was a follow-up question
  parentPromptId         String? // References parent prompt if this is a follow-up
  timeToRespond          Int? // Time in milliseconds to complete response

  // Relations
  prompt  ValidationPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  session StudySession?    @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([promptId])
  @@index([respondedAt])
  @@index([sessionId])
  @@index([userId])
  @@index([userId, respondedAt])
  @@index([calibrationCategory])
  @@index([parentPromptId]) // Query follow-up questions efficiently
  @@index([isFollowUpQuestion]) // Filter follow-up vs original questions
  @@map("validation_responses")
}

// Story 4.4: Calibration category classification
enum CalibrationCategory {
  OVERCONFIDENT // confidence > actual score + 15
  UNDERCONFIDENT // confidence < actual score - 15
  CALIBRATED // abs(confidence - score) <= 15
  UNKNOWN // Insufficient data
}

model ComprehensionMetric {
  id          String   @id @default(cuid())
  conceptName String
  date        DateTime @default(now())
  avgScore    Float // Average validation score for this concept
  sampleSize  Int // Number of validations
  trend       String? // "improving", "stable", "declining"

  // Story 4.1 Task 1.3: Per-user objective-level tracking
  objectiveId String?
  userId      String

  // Relations
  learningObjective LearningObjective? @relation(fields: [objectiveId], references: [id], onDelete: SetNull)

  @@unique([conceptName, date, userId])
  @@index([conceptName])
  @@index([objectiveId])
  @@index([userId])
  @@map("comprehension_metrics")
}

// Story 4.5: Mastery Verification Tracking
model MasteryVerification {
  id               String                  @id @default(cuid())
  userId           String
  objectiveId      String
  status           MasteryStatus           @default(NOT_STARTED)
  verifiedAt       DateTime? // When mastery was achieved (null if not verified)
  criteria         Json // Stores verification criteria met: {consecutiveScores: boolean, multipleTypes: boolean, difficultyMatch: boolean, calibrationAccuracy: boolean, timeSpaced: boolean}
  completedAt      DateTime?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  // Relations
  learningObjective LearningObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@unique([userId, objectiveId]) // One mastery record per user per objective
  @@index([userId])
  @@index([objectiveId])
  @@index([status])
  @@index([userId, status]) // Query user's in-progress mastery verification
  @@map("mastery_verifications")
}

// Story 4.5: Mastery verification status enum
enum MasteryStatus {
  NOT_STARTED
  IN_PROGRESS
  VERIFIED
}

// Story 4.5: Adaptive Session Tracking (IRT-based)
model AdaptiveSession {
  id                  String   @id @default(cuid())
  userId              String
  sessionId           String? // Link to StudySession if part of broader session
  initialDifficulty   Int // Starting difficulty level (0-100)
  currentDifficulty   Int // Current difficulty after adjustments (0-100)
  irtEstimate         Float? // Theta parameter (knowledge estimate) from IRT model
  confidenceInterval  Float? // ±X points at 95% confidence (for early stopping)
  questionCount       Int      @default(0) // Number of questions asked in this adaptive session
  trajectory          Json? // Array of {questionId, difficulty, score, adjustment} for session summary
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([userId, createdAt]) // Query recent adaptive sessions
  @@map("adaptive_sessions")
}

// Story 4.4: Confidence Calibration Metrics (daily aggregates)
model CalibrationMetric {
  id                   String   @id @default(cuid())
  userId               String
  objectiveId          String? // Optional: calibration metrics per learning objective
  date                 DateTime @default(now())
  avgDelta             Float // Average calibration delta for the period
  correlationCoeff     Float // Pearson's r correlation coefficient
  sampleSize           Int // Number of validation responses in this period
  trend                String? // "improving", "stable", "declining"
  overconfidentCount   Int      @default(0) // Count of OVERCONFIDENT responses
  underconfidentCount  Int      @default(0) // Count of UNDERCONFIDENT responses
  calibratedCount      Int      @default(0) // Count of CALIBRATED responses
  meanAbsoluteError    Float? // MAE of calibration deltas
  createdAt            DateTime @default(now())

  @@unique([userId, date, objectiveId])
  @@index([userId, date])
  @@index([objectiveId])
  @@index([correlationCoeff])
  @@map("calibration_metrics")
}

// Story 4.3: Controlled Failure and Memory Anchoring
model ControlledFailure {
  id            String  @id @default(cuid())
  objectiveId   String
  userId        String
  promptId      String // Link to ValidationPrompt
  responseId    String? // Link to ValidationResponse
  attemptNumber Int // 1 = initial failure, 2 = first retry, 3 = second retry, etc.
  isCorrect     Boolean // False for initial failure, track progress on retries

  // Emotion anchoring fields
  emotionTag    EmotionTag?
  personalNotes String?     @db.Text // User's personal reflection on what clicked

  // Spaced repetition retry scheduling
  retestSchedule Json // Array of ISO date strings ["+1d", "+3d", "+7d", "+14d", "+30d"]
  nextRetryAt    DateTime? // Next scheduled retry date (for query optimization)

  // Tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  learningObjective LearningObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  // Performance indexes (Story context constraint #6)
  @@index([userId, objectiveId]) // Query failures by user and concept
  @@index([nextRetryAt]) // Query pending retries efficiently
  @@index([userId, nextRetryAt]) // User's pending retries
  @@map("controlled_failures")
}

model FailurePattern {
  id                 String   @id @default(cuid())
  userId             String
  patternType        String // "category_cluster", "systematic_error", "temporal_pattern"
  affectedObjectives Json // Array of objectiveId strings that exhibit this pattern
  patternDescription String   @db.Text // Human-readable description (e.g., "Confuses ACE inhibitors vs ARBs")
  remediation        String   @db.Text // Suggested remediation strategy
  confidence         Float    @default(0.5) // 0.0-1.0 confidence in pattern detection
  detectedAt         DateTime @default(now())
  lastSeenAt         DateTime @default(now()) // Last time this pattern was observed

  // Relations tracking
  @@index([userId])
  @@index([patternType])
  @@index([userId, lastSeenAt]) // Query recent patterns for dashboard
  @@map("failure_patterns")
}

// ============================================
// SUBSYSTEM 5: Behavioral Analytics
// ============================================

model BehavioralEvent {
  id        String    @id @default(cuid())
  userId    String // Not FK to allow analytics without user cascade
  eventType EventType
  eventData Json // Flexible JSON for event-specific data
  timestamp DateTime  @default(now())

  // Story 5.1: Enhanced behavioral tracking fields
  completionQuality       CompletionQuality?
  contentType             String?
  dayOfWeek               String?
  difficultyLevel         String?
  engagementLevel         EngagementLevel?
  sessionPerformanceScore Float?
  timeOfDay               String?

  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
  @@map("behavioral_events")
}

enum EventType {
  MISSION_STARTED
  MISSION_COMPLETED
  CARD_REVIEWED
  VALIDATION_COMPLETED
  SESSION_STARTED
  SESSION_ENDED
  LECTURE_UPLOADED
  SEARCH_PERFORMED
  GRAPH_VIEWED
}

model LearningPattern {
  id          String      @id @default(cuid())
  userId      String
  patternType PatternType
  patternData Json // Flexible storage for pattern details
  confidence  Float // 0.0 to 1.0 confidence in pattern
  detectedAt  DateTime    @default(now())
  lastSeenAt  DateTime    @default(now())

  @@index([userId])
  @@index([patternType])
  @@map("learning_patterns")
}

enum PatternType {
  OPTIMAL_STUDY_TIME // "Best performance at 7-9 AM"
  STRUGGLE_TOPIC // "Low retention on physiology"
  CONTENT_PREFERENCE // "Prefers visual diagrams"
  SESSION_LENGTH // "Optimal 45-minute sessions"
  DAY_OF_WEEK_PATTERN // "Struggles on Mondays"
}

model PerformancePrediction {
  id             String   @id @default(cuid())
  userId         String
  predictedFor   DateTime // Date/time this prediction is for
  predictionType String // "struggle_likelihood", "optimal_study_time"
  prediction     Json // Prediction details
  confidence     Float // Model confidence
  createdAt      DateTime @default(now())

  @@index([userId])
  @@index([predictedFor])
  @@map("performance_predictions")
}

// Story 2.2: Performance tracking time-series data
model PerformanceMetric {
  id                  String   @id @default(cuid())
  userId              String
  learningObjectiveId String
  date                DateTime @default(now())
  retentionScore      Float // 0.0-1.0 from FSRS
  studyTimeMs         Int // Time spent on this objective today
  reviewCount         Int // Number of reviews today
  correctReviews      Int
  incorrectReviews    Int
  createdAt           DateTime @default(now())

  // Relations
  learningObjective LearningObjective @relation(fields: [learningObjectiveId], references: [id], onDelete: Cascade)

  @@unique([userId, learningObjectiveId, date])
  @@index([userId, date])
  @@index([learningObjectiveId])
  @@map("performance_metrics")
}

// Story 2.3: Intelligent Content Prioritization Algorithm
model Exam {
  id             String   @id @default(cuid())
  userId         String
  name           String // "Histology Midterm"
  date           DateTime
  courseId       String
  coverageTopics String[] // Tags/topics this exam covers
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([courseId])
  @@map("exams")
}

model CoursePriority {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  priorityLevel PriorityLevel @default(MEDIUM)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_priorities")
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model PriorityFeedback {
  id                String         @id @default(cuid())
  userId            String
  objectiveId       String
  suggestedPriority Float // What algorithm suggested
  userFeedback      FeedbackRating
  notes             String?        @db.Text
  createdAt         DateTime       @default(now())

  // Relations
  learningObjective LearningObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([objectiveId])
  @@map("priority_feedback")
}

enum FeedbackRating {
  TOO_HIGH
  JUST_RIGHT
  TOO_LOW
}

// ============================================
// SUBSYSTEM 6: Gamification
// ============================================

model Streak {
  id               String    @id @default(cuid())
  userId           String    @unique
  currentStreak    Int       @default(0) // Consecutive days with study activity
  longestStreak    Int       @default(0) // Personal best streak
  lastStudyDate    DateTime?
  freezesRemaining Int       @default(2) // Streak protection tokens
  freezeUsedDates  String[] // ISO date strings of freeze usage
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("streaks")
}

model Achievement {
  id          String          @id @default(cuid())
  userId      String
  type        AchievementType
  name        String // "7-Day Warrior", "First Objective"
  description String          @db.Text
  tier        AchievementTier @default(BRONZE)
  earnedAt    DateTime        @default(now())
  metadata    Json? // Additional achievement data (e.g., { "streakDays": 7 })

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("achievements")
}

enum AchievementType {
  STREAK_MILESTONE // 7, 30, 100 day streaks
  OBJECTIVES_COMPLETED // 10, 50, 100 objectives
  CARDS_MASTERED // Cards reaching MASTERED state
  PERFECT_SESSION // Session with 100% accuracy
  EARLY_BIRD // Study before 8 AM
  NIGHT_OWL // Study after 10 PM
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model StudyGoal {
  id              String     @id @default(cuid())
  userId          String
  goalType        GoalType
  targetValue     Int // Minutes or objectives count
  currentProgress Int        @default(0)
  period          GoalPeriod
  startDate       DateTime
  endDate         DateTime
  isCompleted     Boolean    @default(false)
  completedAt     DateTime?
  createdAt       DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([period, startDate])
  @@map("study_goals")
}

enum GoalType {
  TIME_BASED // Minutes studied
  OBJECTIVE_BASED // Objectives completed
  REVIEW_BASED // Cards reviewed
}

enum GoalPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

// ============================================
// Story 2.6: Mission Performance Analytics
// ============================================

model MissionAnalytics {
  id     String          @id @default(cuid())
  userId String
  date   DateTime        @default(now())
  period AnalyticsPeriod // DAILY, WEEKLY, MONTHLY

  missionsGenerated   Int
  missionsCompleted   Int
  missionsSkipped     Int
  avgCompletionRate   Float // 0.0-1.0
  avgTimeAccuracy     Float // 1.0 - abs(actual-estimated)/estimated
  avgDifficultyRating Float // User feedback 1-5
  avgSuccessScore     Float // Composite mission success metric

  createdAt DateTime @default(now())

  @@unique([userId, date, period])
  @@index([userId, date])
  @@map("mission_analytics")
}

enum AnalyticsPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

model MissionFeedback {
  id        String @id @default(cuid())
  userId    String
  missionId String

  helpfulnessRating      Int // 1-5: Did this mission help you learn?
  relevanceScore         Int // 1-5: Were objectives relevant to your goals?
  paceRating             PaceRating
  improvementSuggestions String?    @db.Text

  submittedAt DateTime @default(now())

  // Relations
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([missionId])
  @@map("mission_feedback")
}

enum PaceRating {
  TOO_SLOW
  JUST_RIGHT
  TOO_FAST
}

model MissionStreak {
  id                String    @id @default(cuid())
  userId            String    @unique
  currentStreak     Int       @default(0)
  longestStreak     Int       @default(0)
  lastCompletedDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("mission_streaks")
}

model MissionReview {
  id        String       @id @default(cuid())
  userId    String
  period    ReviewPeriod // WEEK, MONTH
  startDate DateTime
  endDate   DateTime

  summary         Json // { missionsCompleted, totalTime, avgSuccessScore }
  highlights      Json // { longestStreak, bestPerformance, topObjectives[] }
  insights        Json // { patterns[], correlations[], improvements[] }
  recommendations Json // { actionItems[], adjustments[] }

  generatedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, startDate])
  @@index([userId, generatedAt])
  @@map("mission_reviews")
}

enum ReviewPeriod {
  WEEK
  MONTH
}

// ============================================
// Story 5.1: Behavioral Pattern Analysis
// ============================================

model BehavioralPattern {
  id              String                @id @default(cuid())
  userId          String
  patternType     BehavioralPatternType
  patternData     Json
  confidence      Float
  firstDetectedAt DateTime              @default(now())
  lastSeenAt      DateTime              @default(now())

  insights InsightPattern[]

  @@index([userId])
  @@index([patternType])
  @@index([confidence])
  @@map("behavioral_patterns")
}

enum BehavioralPatternType {
  OPTIMAL_STUDY_TIME
  STRUGGLE_TOPIC
  CONTENT_PREFERENCE
  SESSION_LENGTH
  DAY_OF_WEEK_PATTERN
  PERFORMANCE_CORRELATION
  SESSION_DURATION_PREFERENCE
  CONTENT_TYPE_PREFERENCE
  PERFORMANCE_PEAK
  ATTENTION_CYCLE
  FORGETTING_CURVE
}

model BehavioralInsight {
  id             String      @id @default(cuid())
  userId         String
  insightType    InsightType
  message        String      @db.Text
  actionable     Boolean     @default(true)
  priority       Int         @default(5)
  createdAt      DateTime    @default(now())
  acknowledgedAt DateTime?

  patterns InsightPattern[]

  @@index([userId])
  @@index([createdAt])
  @@index([acknowledgedAt])
  @@map("behavioral_insights")
}

enum InsightType {
  STUDY_TIME_OPTIMIZATION
  CONTENT_DIFFICULTY_MATCH
  ENGAGEMENT_BOOST
  PERFORMANCE_IMPROVEMENT
  SESSION_LENGTH_ADJUSTMENT
  CONTENT_PREFERENCE
  RETENTION_STRATEGY
}

model InsightPattern {
  id        String @id @default(cuid())
  insightId String
  patternId String

  insight BehavioralInsight @relation(fields: [insightId], references: [id], onDelete: Cascade)
  pattern BehavioralPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)

  @@unique([insightId, patternId])
  @@index([insightId])
  @@index([patternId])
  @@map("insight_patterns")
}

model UserLearningProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  profileData Json
  lastUpdated DateTime @default(now())

  @@index([userId])
  @@map("user_learning_profiles")
}

enum CompletionQuality {
  EXCELLENT
  GOOD
  FAIR
  POOR
  RUSHED
  NORMAL
  THOROUGH
}

enum EngagementLevel {
  VERY_HIGH
  HIGH
  MEDIUM
  LOW
  VERY_LOW
}

// ============================================
// Story 4.6: Comprehensive Understanding Analytics
// ============================================

model UnderstandingPrediction {
  id                  String   @id @default(cuid())
  userId              String
  objectiveId         String
  predictionType      String // EXAM_SUCCESS, FORGETTING_RISK, MASTERY_DATE
  predictedValue      Float
  confidenceInterval  Json // { lower: number, upper: number }
  predictedAt         DateTime @default(now())
  actualValue         Float?
  accuracy            Float?

  @@index([userId])
  @@index([objectiveId])
  @@index([predictedAt])
  @@map("understanding_predictions")
}

model PeerBenchmark {
  id           String   @id @default(cuid())
  objectiveId  String
  metric       String // comprehension_score, reasoning_score, etc
  percentile25 Float
  percentile50 Float
  percentile75 Float
  mean         Float
  stdDev       Float
  sampleSize   Int
  calculatedAt DateTime @default(now())

  @@unique([objectiveId, metric])
  @@index([objectiveId])
  @@map("peer_benchmarks")
}

model DailyInsight {
  id                  String    @id @default(cuid())
  userId              String
  date                DateTime
  insightType         String // daily_priority, weekly_top3, etc
  message             String
  recommendedActions  Json // string[]
  priority            Int // 1-10
  dismissed           Boolean   @default(false)

  @@index([userId])
  @@index([date])
  @@map("daily_insights")
}
