// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// ============================================
// SUBSYSTEM 1: Content Processing Pipeline
// ============================================

model User {
  id            String   @id @default(cuid())
  email         String?  @unique
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Mission preferences (Story 2.4 Task 8)
  defaultMissionMinutes Int      @default(50)  // 30-90 minute range
  missionDifficulty     String   @default("AUTO")  // AUTO, EASY, MODERATE, CHALLENGING
  preferredStudyTime    String?  // HH:MM format (e.g., "07:00", "18:00")
  autoGenerateMissions  Boolean  @default(true)

  // Performance tracking preferences (Story 2.2 Task 8)
  performanceTrackingEnabled Boolean @default(true)
  includeInAnalytics         Boolean @default(true)

  // Story 2.6: Mission adaptation tracking
  lastMissionAdaptation DateTime?  // Throttle adaptations to max 1/week

  // Story 5.1: Behavioral analysis privacy controls
  behavioralAnalysisEnabled       Boolean @default(true)
  learningStyleProfilingEnabled   Boolean @default(true)
  shareAnonymizedPatterns         Boolean @default(false) // Future feature for research

  // Relations
  courses       Course[]
  lectures      Lecture[]
  studySessions StudySession[]
  missions      Mission[]
  reviews       Review[]
  exams         Exam[]
  coursePriorities CoursePriority[]
  streak        Streak?
  achievements  Achievement[]
  studyGoals    StudyGoal[]
  missionStreak MissionStreak?
  missionReviews MissionReview[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  userId      String
  name        String   // "Gross Anatomy (ANAT 505)"
  code        String?  // "ANAT 505"
  term        String?  // "Fall 2025"
  color       String?  // OKLCH color for visual organization (e.g., "oklch(0.7 0.15 230)")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectures    Lecture[]
  cards       Card[]
  exams       Exam[]
  coursePriorities CoursePriority[]

  @@index([userId])
  @@map("courses")
}

model Lecture {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  title             String
  fileName          String
  fileUrl           String      // Local path or Supabase URL
  fileSize          Int
  processingStatus  ProcessingStatus @default(PENDING)
  uploadedAt        DateTime @default(now())
  processedAt       DateTime?

  // Processing progress tracking
  processingProgress Int      @default(0)  // 0-100 percentage
  totalPages        Int?     // Total number of pages to process
  processedPages    Int      @default(0)  // Number of pages processed
  processingStartedAt DateTime?  // When processing started
  estimatedCompletionAt DateTime?  // ETA for completion

  // Metadata
  weekNumber        Int?
  topicTags         String[]

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contentChunks     ContentChunk[]
  learningObjectives LearningObjective[]
  cards             Card[]

  @@index([userId])
  @@index([courseId])
  @@index([processingStatus])
  @@map("lectures")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model ContentChunk {
  id          String   @id @default(cuid())
  lectureId   String
  content     String   @db.Text
  embedding   Unsupported("vector(1536)")?  // gemini-embedding-001 (output_dimensionality: 1536)
  chunkIndex  Int      // Order within lecture
  pageNumber  Int?
  createdAt   DateTime @default(now())

  // Relations
  lecture     Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@index([lectureId])
  @@map("content_chunks")
}

model LearningObjective {
  id               String              @id @default(cuid())
  lectureId        String
  objective        String              @db.Text
  complexity       ObjectiveComplexity @default(INTERMEDIATE)
  pageStart        Int?
  pageEnd          Int?
  isHighYield      Boolean             @default(false)
  boardExamTags    String[]            // USMLE Step 1/2/3, COMLEX Level 1/2/3, subject tags
  extractedBy      String              @default("gpt-5")
  createdAt        DateTime            @default(now())

  // Performance tracking fields (Story 2.2)
  masteryLevel     MasteryLevel        @default(NOT_STARTED)
  totalStudyTimeMs Int                 @default(0)
  lastStudiedAt    DateTime?
  weaknessScore    Float               @default(0.5) // 0.0-1.0, higher = weaker

  // Relations
  lecture        Lecture               @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  cards          Card[]
  prerequisites  ObjectivePrerequisite[] @relation("Objective")
  dependents     ObjectivePrerequisite[] @relation("Prerequisite")
  performanceMetrics PerformanceMetric[]
  priorityFeedback PriorityFeedback[]
  strugglePredictions  StrugglePrediction[]
  struggleIndicators   StruggleIndicator[]

  @@index([lectureId])
  @@index([isHighYield])
  @@index([complexity])
  @@index([masteryLevel])
  @@index([weaknessScore])
  @@map("learning_objectives")
}

enum ObjectiveComplexity {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum MasteryLevel {
  NOT_STARTED
  BEGINNER
  INTERMEDIATE
  ADVANCED
  MASTERED
}

model ObjectivePrerequisite {
  id             String            @id @default(cuid())
  objectiveId    String
  prerequisiteId String
  strength       Float             @default(1.0)

  // Relations
  objective      LearningObjective @relation("Objective", fields: [objectiveId], references: [id], onDelete: Cascade)
  prerequisite   LearningObjective @relation("Prerequisite", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@unique([objectiveId, prerequisiteId])
  @@index([objectiveId])
  @@index([prerequisiteId])
  @@map("objective_prerequisites")
}

// ============================================
// SUBSYSTEM 2: Learning Engine
// ============================================

model Mission {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @default(now())
  status          MissionStatus @default(PENDING)
  estimatedMinutes Int
  completedAt     DateTime?
  actualMinutes   Int?     // Tracked during study session
  completedObjectivesCount Int @default(0)

  // Mission content
  // objectives: JSON array of { objectiveId, estimatedMinutes, completed, completedAt?, notes? }
  objectives      Json     // Array of MissionObjective objects
  reviewCardCount Int      @default(0) // Number of cards due for review
  newContentCount Int      @default(0) // Number of new concepts to learn

  // Story 2.6: Mission analytics fields
  successScore      Float?         // 0.0-1.0 composite success metric (Task 9)
  difficultyRating  Int?           // User feedback 1-5 (Task 4)

  // Story 5.3: Orchestration fields
  recommendedStartTime DateTime?      // Optimal time from orchestration
  recommendedDuration  Int?           // Minutes, from duration optimizer
  intensityLevel       IntensityLevel? @default(MEDIUM)
  contentSequence      Json?          // Array of {type, id, duration, phase}
  orchestrationPlanId  String?        // FK to SessionOrchestrationPlan

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySessions   StudySession[]
  feedback        MissionFeedback[]
  interventions   InterventionRecommendation[]

  @@index([userId])
  @@index([date])
  @@index([status])
  @@index([recommendedStartTime])
  @@map("missions")
}

enum MissionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum IntensityLevel {
  LOW
  MEDIUM
  HIGH
}

model Card {
  id                String   @id @default(cuid())
  courseId          String
  lectureId         String?
  objectiveId       String?
  front             String   @db.Text
  back              String   @db.Text
  cardType          CardType @default(BASIC)
  createdAt         DateTime @default(now())

  // FSRS state
  difficulty        Float    @default(0)
  stability         Float    @default(0)
  retrievability    Float    @default(0)
  lastReviewedAt    DateTime?
  nextReviewAt      DateTime?
  reviewCount       Int      @default(0)
  lapseCount        Int      @default(0)

  // Relations
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture           Lecture? @relation(fields: [lectureId], references: [id], onDelete: SetNull)
  objective         LearningObjective? @relation(fields: [objectiveId], references: [id], onDelete: SetNull)
  reviews           Review[]

  @@index([courseId])
  @@index([nextReviewAt])
  @@map("cards")
}

enum CardType {
  BASIC
  CLOZE
  CLINICAL_REASONING
}

model Review {
  id              String   @id @default(cuid())
  userId          String
  cardId          String
  sessionId       String?
  rating          ReviewRating
  timeSpentMs     Int
  reviewedAt      DateTime @default(now())

  // FSRS data captured at review time
  difficultyBefore Float
  stabilityBefore  Float
  difficultyAfter  Float
  stabilityAfter   Float

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card            Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  session         StudySession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([cardId])
  @@index([reviewedAt])
  @@map("reviews")
}

enum ReviewRating {
  AGAIN   // 1 - Complete lapse
  HARD    // 2 - Difficult recall
  GOOD    // 3 - Correct with effort
  EASY    // 4 - Perfect recall
}

model StudySession {
  id              String   @id @default(cuid())
  userId          String
  missionId       String?
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  durationMs      Int?

  // Session stats
  reviewsCompleted Int     @default(0)
  newCardsStudied  Int     @default(0)

  // Session notes for reflection (AC #7)
  sessionNotes    String?  @db.Text

  // Mission integration fields (Story 2.5 Task 1)
  currentObjectiveIndex Int     @default(0)  // 0-based index of current objective in mission
  missionObjectives     Json?   // Snapshot of mission objectives at session start for state recovery
  objectiveCompletions  Json?   // Array of { objectiveId, completedAt, timeSpentMs, selfAssessment, confidenceRating, notes? }

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission         Mission? @relation(fields: [missionId], references: [id], onDelete: SetNull)
  reviews         Review[]
  validationResponses ValidationResponse[]

  @@index([userId])
  @@index([startedAt])
  @@map("study_sessions")
}

// ============================================
// SUBSYSTEM 3: Knowledge Graph & Search
// ============================================

model Concept {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  category    String?  // "anatomy", "physiology", "pathology"
  embedding   Unsupported("vector(1536)")?  // gemini-embedding-001 (output_dimensionality: 1536)
  createdAt   DateTime @default(now())

  // Relations
  relatedFrom ConceptRelationship[] @relation("ConceptFrom")
  relatedTo   ConceptRelationship[] @relation("ConceptTo")

  @@index([category])
  @@map("concepts")
}

model ConceptRelationship {
  id            String   @id @default(cuid())
  fromConceptId String
  toConceptId   String
  relationship  RelationshipType
  strength      Float    @default(1.0)  // 0.0 to 1.0
  createdAt     DateTime @default(now())

  // Relations
  fromConcept   Concept  @relation("ConceptFrom", fields: [fromConceptId], references: [id], onDelete: Cascade)
  toConcept     Concept  @relation("ConceptTo", fields: [toConceptId], references: [id], onDelete: Cascade)

  @@unique([fromConceptId, toConceptId, relationship])
  @@index([fromConceptId])
  @@index([toConceptId])
  @@map("concept_relationships")
}

enum RelationshipType {
  PREREQUISITE  // fromConcept is prerequisite for toConcept
  RELATED       // General association
  INTEGRATED    // Cross-course integration
  CLINICAL      // Clinical application
}

// ============================================
// SUBSYSTEM 4: Understanding Validation
// ============================================

model ValidationPrompt {
  id          String   @id @default(cuid())
  promptText  String   @db.Text
  promptType  PromptType
  conceptName String
  expectedCriteria String[] // Key points expected in answer
  createdAt   DateTime @default(now())

  // Relations
  responses   ValidationResponse[]

  @@map("validation_prompts")
}

enum PromptType {
  EXPLAIN_TO_PATIENT
  CLINICAL_REASONING
  CONTROLLED_FAILURE
}

model ValidationResponse {
  id          String   @id @default(cuid())
  promptId    String
  sessionId   String?
  userAnswer  String   @db.Text
  aiEvaluation String  @db.Text
  score       Float    // 0.0 to 1.0
  confidence  Float?   // User's self-reported confidence
  respondedAt DateTime @default(now())

  // Relations
  prompt      ValidationPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  session     StudySession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([promptId])
  @@index([respondedAt])
  @@map("validation_responses")
}

model ComprehensionMetric {
  id          String   @id @default(cuid())
  conceptName String
  date        DateTime @default(now())
  avgScore    Float    // Average validation score for this concept
  sampleSize  Int      // Number of validations
  trend       String?  // "improving", "stable", "declining"

  @@unique([conceptName, date])
  @@index([conceptName])
  @@map("comprehension_metrics")
}

// ============================================
// SUBSYSTEM 5: Behavioral Analytics
// ============================================

model BehavioralEvent {
  id          String   @id @default(cuid())
  userId      String   // Not FK to allow analytics without user cascade
  eventType   EventType
  eventData   Json     // Flexible JSON for event-specific data
  timestamp   DateTime @default(now())

  // Story 5.1: Session-level metrics for pattern analysis
  sessionPerformanceScore Int?              // 0-100, calculated from reviews + validation
  engagementLevel         EngagementLevel?
  completionQuality       CompletionQuality?
  timeOfDay               Int?              // Hour 0-23
  dayOfWeek               Int?              // 0=Sunday, 6=Saturday
  contentType             String?           // "lecture", "flashcard", "validation", "clinical_reasoning"
  difficultyLevel         String?           // "easy", "medium", "hard"

  // Story 5.4: Cognitive load markers
  cognitiveLoadScore  Float?   // 0-100 scale
  stressIndicators    Json?    // Array of stress signals
  overloadDetected    Boolean? @default(false)

  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
  @@map("behavioral_events")
}

enum EventType {
  MISSION_STARTED
  MISSION_COMPLETED
  CARD_REVIEWED
  VALIDATION_COMPLETED
  SESSION_STARTED
  SESSION_ENDED
  LECTURE_UPLOADED
  SEARCH_PERFORMED
  GRAPH_VIEWED
}

enum EngagementLevel {
  LOW       // <60 score, frequent pauses
  MEDIUM    // 60-80 score, normal engagement
  HIGH      // >80 score, flow state indicators
}

enum CompletionQuality {
  RUSHED      // Completed too quickly, low performance
  NORMAL      // Expected pace and performance
  THOROUGH    // Slow and deliberate, high performance
}

// Story 5.1: Behavioral Pattern Recognition Models

model BehavioralPattern {
  id                String         @id @default(cuid())
  userId            String
  patternType       BehavioralPatternType
  patternName       String         // Human-readable: "Morning peak performance"
  confidence        Float          // 0.0-1.0, statistical confidence
  evidence          Json           // Supporting data: timestamps, metrics, session IDs
  detectedAt        DateTime       @default(now())
  lastSeenAt        DateTime       @default(now())
  occurrenceCount   Int            @default(1)

  // Relations
  insights InsightPattern[]

  @@index([userId])
  @@index([patternType])
  @@index([confidence])
  @@map("behavioral_patterns")
}

enum BehavioralPatternType {
  OPTIMAL_STUDY_TIME          // Best time-of-day for studying
  SESSION_DURATION_PREFERENCE // Preferred session length
  CONTENT_TYPE_PREFERENCE     // Visual vs. text vs. clinical scenarios
  PERFORMANCE_PEAK            // Multi-hour high-performance windows
  ATTENTION_CYCLE             // Within-session fatigue patterns
  FORGETTING_CURVE            // Personal retention decay rate
}

model BehavioralInsight {
  id                      String              @id @default(cuid())
  userId                  String
  insightType             InsightType
  title                   String              // "Study during your peak hours"
  description             String              @db.Text // Detailed explanation
  actionableRecommendation String             @db.Text // Specific action
  confidence              Float               // 0.0-1.0
  createdAt               DateTime            @default(now())
  acknowledgedAt          DateTime?
  applied                 Boolean             @default(false)

  // Relations
  patterns InsightPattern[]

  @@index([userId])
  @@index([createdAt])
  @@index([acknowledgedAt])
  @@map("behavioral_insights")
}

// Join table for many-to-many relationship between BehavioralInsight and BehavioralPattern
model InsightPattern {
  id         String            @id @default(cuid())
  insightId  String
  patternId  String

  insight    BehavioralInsight @relation(fields: [insightId], references: [id], onDelete: Cascade)
  pattern    BehavioralPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)

  @@unique([insightId, patternId])
  @@index([insightId])
  @@index([patternId])
  @@map("insight_patterns")
}

enum InsightType {
  STUDY_TIME_OPTIMIZATION     // When to study
  SESSION_LENGTH_ADJUSTMENT   // How long to study
  CONTENT_PREFERENCE         // What content types to prioritize
  RETENTION_STRATEGY         // How to improve retention
}

model UserLearningProfile {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  preferredStudyTimes       Json     // Array of { dayOfWeek, startHour, endHour }
  averageSessionDuration    Int      // Minutes
  optimalSessionDuration    Int      // Minutes (recommended)
  contentPreferences        Json     // { lectures: 0.4, flashcards: 0.3, validation: 0.2, clinicalReasoning: 0.1 }
  learningStyleProfile      Json     // VARK: { visual: 0.3, auditory: 0.2, kinesthetic: 0.4, reading: 0.1 }
  personalizedForgettingCurve Json   // { R0: 0.9, k: 0.15, halfLife: 4.6 }
  lastAnalyzedAt            DateTime @default(now())
  dataQualityScore          Float    @default(0.0) // 0.0-1.0, based on data sufficiency

  @@index([userId])
  @@map("user_learning_profiles")
}

// Legacy LearningPattern model (kept for backwards compatibility)
model LearningPattern {
  id          String   @id @default(cuid())
  userId      String
  patternType PatternType
  patternData Json     // Flexible storage for pattern details
  confidence  Float    // 0.0 to 1.0 confidence in pattern
  detectedAt  DateTime @default(now())
  lastSeenAt  DateTime @default(now())

  @@index([userId])
  @@index([patternType])
  @@map("learning_patterns")
}

enum PatternType {
  OPTIMAL_STUDY_TIME      // "Best performance at 7-9 AM"
  STRUGGLE_TOPIC          // "Low retention on physiology"
  CONTENT_PREFERENCE      // "Prefers visual diagrams"
  SESSION_LENGTH          // "Optimal 45-minute sessions"
  DAY_OF_WEEK_PATTERN     // "Struggles on Mondays"
}

model PerformancePrediction {
  id            String   @id @default(cuid())
  userId        String
  predictedFor  DateTime // Date/time this prediction is for
  predictionType String  // "struggle_likelihood", "optimal_study_time"
  prediction    Json     // Prediction details
  confidence    Float    // Model confidence
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([predictedFor])
  @@map("performance_predictions")
}

// Story 5.2: Predictive Analytics for Learning Struggles

model StrugglePrediction {
  id                          String             @id @default(cuid())
  userId                      String
  learningObjectiveId         String?
  topicId                     String?            // Topic or subject area
  predictionDate              DateTime           @default(now())
  predictedStruggleProbability Float             // 0.0-1.0
  predictionConfidence        Float              // 0.0-1.0, based on data quality
  predictionStatus            PredictionStatus   @default(PENDING)
  actualOutcome               Boolean?           // Did user actually struggle?
  outcomeRecordedAt           DateTime?
  featureVector               Json               // Features used for prediction

  // Relations
  learningObjective           LearningObjective? @relation(fields: [learningObjectiveId], references: [id], onDelete: SetNull)
  indicators                  StruggleIndicator[]
  interventions               InterventionRecommendation[]
  feedbacks                   PredictionFeedback[]

  @@index([userId])
  @@index([predictionDate])
  @@index([predictionStatus])
  @@index([predictedStruggleProbability])
  @@map("struggle_predictions")
}

enum PredictionStatus {
  PENDING         // Not yet studied
  CONFIRMED       // User did struggle (true positive)
  FALSE_POSITIVE  // User didn't struggle (false positive)
  MISSED          // User struggled but not predicted (false negative, recorded retroactively)
}

model StruggleIndicator {
  id                    String         @id @default(cuid())
  userId                String
  predictionId          String?
  learningObjectiveId   String
  indicatorType         IndicatorType
  severity              Severity       @default(MEDIUM)
  detectedAt            DateTime       @default(now())
  context               Json           // Additional metadata

  // Relations
  prediction            StrugglePrediction? @relation(fields: [predictionId], references: [id], onDelete: SetNull)
  learningObjective     LearningObjective   @relation(fields: [learningObjectiveId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([indicatorType])
  @@index([severity])
  @@map("struggle_indicators")
}

enum IndicatorType {
  LOW_RETENTION               // Retention score below threshold
  PREREQUISITE_GAP            // Missing prerequisite knowledge
  COMPLEXITY_MISMATCH         // Content too difficult for current level
  COGNITIVE_OVERLOAD          // User showing fatigue/stress signals
  HISTORICAL_STRUGGLE_PATTERN // Past struggles in similar topics
  TOPIC_SIMILARITY_STRUGGLE   // Struggled with semantically similar topics
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

model InterventionRecommendation {
  id                  String             @id @default(cuid())
  predictionId        String
  userId              String
  interventionType    InterventionType
  description         String             @db.Text
  reasoning           String             @db.Text   // Why this intervention
  priority            Int                @default(5) // 1-10
  status              InterventionStatus @default(PENDING)
  appliedAt           DateTime?
  appliedToMissionId  String?
  effectiveness       Float?             // 0.0-1.0, measured post-intervention
  createdAt           DateTime           @default(now())

  // Relations
  prediction          StrugglePrediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)
  mission             Mission?           @relation(fields: [appliedToMissionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@map("intervention_recommendations")
}

enum InterventionType {
  PREREQUISITE_REVIEW     // Review prerequisite objectives
  DIFFICULTY_PROGRESSION  // Start with easier content
  CONTENT_FORMAT_ADAPT    // Alternative content format
  COGNITIVE_LOAD_REDUCE   // Reduce session complexity
  SPACED_REPETITION_BOOST // Increase review frequency
  BREAK_SCHEDULE_ADJUST   // More frequent breaks
}

enum InterventionStatus {
  PENDING     // Not yet applied
  APPLIED     // Applied to mission
  COMPLETED   // User completed intervention
  DISMISSED   // User dismissed recommendation
}

model PredictionFeedback {
  id              String       @id @default(cuid())
  predictionId    String
  userId          String
  feedbackType    FeedbackType
  actualStruggle  Boolean      // User's assessment
  helpfulness     Int?         // 1-5 stars (for intervention feedback)
  comments        String?      @db.Text
  submittedAt     DateTime     @default(now())

  // Relations
  prediction      StrugglePrediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([feedbackType])
  @@map("prediction_feedbacks")
}

enum FeedbackType {
  HELPFUL           // Prediction was helpful
  NOT_HELPFUL       // Prediction wasn't helpful
  INACCURATE        // Prediction was wrong
  INTERVENTION_GOOD // Intervention worked well
  INTERVENTION_BAD  // Intervention didn't help
}

// Story 2.2: Performance tracking time-series data
model PerformanceMetric {
  id                   String            @id @default(cuid())
  userId               String
  learningObjectiveId  String
  date                 DateTime          @default(now())
  retentionScore       Float             // 0.0-1.0 from FSRS
  studyTimeMs          Int               // Time spent on this objective today
  reviewCount          Int               // Number of reviews today
  correctReviews       Int
  incorrectReviews     Int
  createdAt            DateTime          @default(now())

  // Relations
  learningObjective    LearningObjective @relation(fields: [learningObjectiveId], references: [id], onDelete: Cascade)

  @@unique([userId, learningObjectiveId, date])
  @@index([userId, date])
  @@index([learningObjectiveId])
  @@map("performance_metrics")
}

// Story 2.3: Intelligent Content Prioritization Algorithm
model Exam {
  id              String   @id @default(cuid())
  userId          String
  name            String   // "Histology Midterm"
  date            DateTime
  courseId        String
  coverageTopics  String[] // Tags/topics this exam covers
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([courseId])
  @@map("exams")
}

model CoursePriority {
  id             String         @id @default(cuid())
  userId         String
  courseId       String
  priorityLevel  PriorityLevel  @default(MEDIUM)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_priorities")
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model PriorityFeedback {
  id                String          @id @default(cuid())
  userId            String
  objectiveId       String
  suggestedPriority Float           // What algorithm suggested
  userFeedback      FeedbackRating
  notes             String?         @db.Text
  createdAt         DateTime        @default(now())

  // Relations
  learningObjective LearningObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([objectiveId])
  @@map("priority_feedback")
}

enum FeedbackRating {
  TOO_HIGH
  JUST_RIGHT
  TOO_LOW
}

// ============================================
// SUBSYSTEM 6: Gamification
// ============================================

model Streak {
  id               String   @id @default(cuid())
  userId           String   @unique
  currentStreak    Int      @default(0)  // Consecutive days with study activity
  longestStreak    Int      @default(0)  // Personal best streak
  lastStudyDate    DateTime?
  freezesRemaining Int      @default(2)  // Streak protection tokens
  freezeUsedDates  String[] // ISO date strings of freeze usage
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("streaks")
}

model Achievement {
  id          String          @id @default(cuid())
  userId      String
  type        AchievementType
  name        String          // "7-Day Warrior", "First Objective"
  description String          @db.Text
  tier        AchievementTier @default(BRONZE)
  earnedAt    DateTime        @default(now())
  metadata    Json?           // Additional achievement data (e.g., { "streakDays": 7 })

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("achievements")
}

enum AchievementType {
  STREAK_MILESTONE    // 7, 30, 100 day streaks
  OBJECTIVES_COMPLETED // 10, 50, 100 objectives
  CARDS_MASTERED      // Cards reaching MASTERED state
  PERFECT_SESSION     // Session with 100% accuracy
  EARLY_BIRD          // Study before 8 AM
  NIGHT_OWL           // Study after 10 PM
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model StudyGoal {
  id                String       @id @default(cuid())
  userId            String
  goalType          GoalType
  targetValue       Int          // Minutes or objectives count
  currentProgress   Int          @default(0)
  period            GoalPeriod
  startDate         DateTime
  endDate           DateTime
  isCompleted       Boolean      @default(false)
  completedAt       DateTime?
  createdAt         DateTime     @default(now())

  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([period, startDate])
  @@map("study_goals")
}

enum GoalType {
  TIME_BASED       // Minutes studied
  OBJECTIVE_BASED  // Objectives completed
  REVIEW_BASED     // Cards reviewed
}

enum GoalPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

// ============================================
// Story 2.6: Mission Performance Analytics
// ============================================

model MissionAnalytics {
  id                    String          @id @default(cuid())
  userId                String
  date                  DateTime        @default(now())
  period                AnalyticsPeriod // DAILY, WEEKLY, MONTHLY

  missionsGenerated     Int
  missionsCompleted     Int
  missionsSkipped       Int
  avgCompletionRate     Float           // 0.0-1.0
  avgTimeAccuracy       Float           // 1.0 - abs(actual-estimated)/estimated
  avgDifficultyRating   Float           // User feedback 1-5
  avgSuccessScore       Float           // Composite mission success metric

  createdAt             DateTime        @default(now())

  @@unique([userId, date, period])
  @@index([userId, date])
  @@map("mission_analytics")
}

enum AnalyticsPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

model MissionFeedback {
  id                      String      @id @default(cuid())
  userId                  String
  missionId               String

  helpfulnessRating       Int         // 1-5: Did this mission help you learn?
  relevanceScore          Int         // 1-5: Were objectives relevant to your goals?
  paceRating              PaceRating
  improvementSuggestions  String?     @db.Text

  submittedAt             DateTime    @default(now())

  // Relations
  mission                 Mission     @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([missionId])
  @@map("mission_feedback")
}

enum PaceRating {
  TOO_SLOW
  JUST_RIGHT
  TOO_FAST
}

model MissionStreak {
  id                String    @id @default(cuid())
  userId            String    @unique
  currentStreak     Int       @default(0)
  longestStreak     Int       @default(0)
  lastCompletedDate DateTime?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("mission_streaks")
}

model MissionReview {
  id              String       @id @default(cuid())
  userId          String
  period          ReviewPeriod // WEEK, MONTH
  startDate       DateTime
  endDate         DateTime

  summary         Json         // { missionsCompleted, totalTime, avgSuccessScore }
  highlights      Json         // { longestStreak, bestPerformance, topObjectives[] }
  insights        Json         // { patterns[], correlations[], improvements[] }
  recommendations Json         // { actionItems[], adjustments[] }

  generatedAt     DateTime     @default(now())

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, startDate])
  @@index([userId, generatedAt])
  @@map("mission_reviews")
}

enum ReviewPeriod {
  WEEK
  MONTH
}

// ============================================
// Story 5.3: Optimal Study Timing and Session Orchestration
// ============================================

model StudyScheduleRecommendation {
  id                    String   @id @default(cuid())
  userId                String
  recommendedStartTime  DateTime
  recommendedDuration   Int      // Minutes
  confidence            Float    // 0.0-1.0
  reasoningFactors      Json     // {optimalTimeScore, calendarAvailable, ...}
  calendarIntegration   Boolean  @default(false)
  createdAt             DateTime @default(now())
  appliedAt             DateTime?

  @@index([userId])
  @@index([recommendedStartTime])
  @@map("study_schedule_recommendations")
}

model SessionOrchestrationPlan {
  id                  String         @id @default(cuid())
  missionId           String?
  userId              String
  plannedStartTime    DateTime
  plannedEndTime      DateTime
  actualStartTime     DateTime?
  actualEndTime       DateTime?
  plannedBreaks       Json           // Array of {time, duration}
  actualBreaks        Json?          // Array of {startedAt, endedAt}
  intensityModulation IntensityLevel @default(MEDIUM)
  contentSequence     Json           // Array of {type, id, duration, phase}
  createdAt           DateTime       @default(now())

  @@index([userId])
  @@index([plannedStartTime])
  @@map("session_orchestration_plans")
}

model CalendarIntegration {
  id               String           @id @default(cuid())
  userId           String           @unique
  calendarProvider CalendarProvider
  accessToken      String           @db.Text // Encrypted OAuth token
  refreshToken     String?          @db.Text // Encrypted OAuth refresh
  calendarId       String
  syncEnabled      Boolean          @default(true)
  lastSyncAt       DateTime?
  createdAt        DateTime         @default(now())

  @@index([userId])
  @@map("calendar_integrations")
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  ICAL
}

model ScheduleAdaptation {
  id                 String         @id @default(cuid())
  userId             String
  adaptationType     AdaptationType
  reason             String         @db.Text
  oldValue           String?
  newValue           String?
  appliedAt          DateTime
  effectivenessScore Int?           // 0-100, measured post-adaptation

  @@index([userId])
  @@index([appliedAt])
  @@map("schedule_adaptations")
}

enum AdaptationType {
  TIME_SHIFT
  DURATION_CHANGE
  INTENSITY_ADJUSTMENT
  FREQUENCY_CHANGE
}

// ============================================
// Story 5.6: Behavioral Insights Dashboard
// ============================================

model BehavioralGoal {
  id                  String         @id @default(cuid())
  userId              String
  goalType            BehavioralGoalType
  title               String         // User-facing title
  description         String?        @db.Text
  targetMetric        String         // Metric being tracked (e.g., "consistencyScore", "sessionDuration")
  currentValue        Float          @default(0)
  targetValue         Float          // Goal threshold
  deadline            DateTime
  status              GoalStatus     @default(ACTIVE)
  progressHistory     Json           // Array of {date, value, note?} checkpoints
  completedAt         DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([userId])
  @@index([status])
  @@index([deadline])
  @@map("behavioral_goals")
}

enum BehavioralGoalType {
  STUDY_TIME_CONSISTENCY    // Study at optimal times consistently
  SESSION_DURATION          // Maintain optimal session length
  CONTENT_DIVERSIFICATION   // Balance content types (VARK)
  RETENTION_IMPROVEMENT     // Improve forgetting curve metrics
  CUSTOM                    // User-defined goal
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}

model Recommendation {
  id                  String               @id @default(cuid())
  userId              String
  recommendationType  RecommendationType
  title               String               // "Study during your peak hours (7-9 AM)"
  description         String               @db.Text
  actionableText      String               @db.Text // Specific action to take
  confidence          Float                // 0.0-1.0
  estimatedImpact     Float                // 0.0-1.0 expected improvement
  easeOfImplementation Float               // 0.0-1.0 how easy to apply
  userReadiness       Float                @default(0.5) // 0.0-1.0 based on patterns
  priorityScore       Float                // Composite score for ranking
  sourcePatternIds    String[]             // BehavioralPattern IDs supporting this
  sourceInsightIds    String[]             // BehavioralInsight IDs supporting this
  createdAt           DateTime             @default(now())
  appliedAt           DateTime?
  dismissedAt         DateTime?

  // Relations
  appliedRecommendations AppliedRecommendation[]

  @@index([userId])
  @@index([priorityScore])
  @@index([createdAt])
  @@map("recommendations")
}

enum RecommendationType {
  STUDY_TIME_OPTIMIZATION     // When to study
  SESSION_DURATION_ADJUSTMENT // How long to study
  CONTENT_TYPE_BALANCE        // Content mix recommendations
  RETENTION_STRATEGY          // Spaced repetition, active recall
  CONSISTENCY_BUILDING        // Habit formation
  EXPERIMENTAL_SUGGESTION     // Try something new
}

model AppliedRecommendation {
  id                  String         @id @default(cuid())
  recommendationId    String
  userId              String
  appliedAt           DateTime       @default(now())
  applicationType     ApplicationType @default(MANUAL)
  baselineMetrics     Json           // Metrics before application
  currentMetrics      Json?          // Metrics after 2 weeks
  effectiveness       Float?         // 0.0-1.0 measured improvement
  userFeedbackRating  Int?           // 1-5 stars
  userNotes           String?        @db.Text
  evaluatedAt         DateTime?

  // Relations
  recommendation      Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([appliedAt])
  @@index([recommendationId])
  @@map("applied_recommendations")
}

enum ApplicationType {
  AUTO          // Automatically applied to settings
  MANUAL        // User manually implements
  REMINDER      // Set as recurring reminder
  GOAL          // Created as behavioral goal
}

model InsightNotification {
  id              String             @id @default(cuid())
  userId          String
  notificationType NotificationType
  title           String
  message         String             @db.Text
  priority        NotificationPriority @default(NORMAL)
  relatedEntityId String?            // BehavioralPattern ID, Recommendation ID, or BehavioralGoal ID
  relatedEntityType String?          // "pattern", "recommendation", "goal"
  readAt          DateTime?
  actionTaken     Boolean            @default(false)
  createdAt       DateTime           @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([readAt])
  @@map("insight_notifications")
}

enum NotificationType {
  NEW_PATTERN              // New behavioral pattern detected
  NEW_RECOMMENDATION       // High-impact recommendation available
  GOAL_PROGRESS_25         // Goal 25% complete
  GOAL_PROGRESS_50         // Goal 50% complete
  GOAL_PROGRESS_75         // Goal 75% complete
  GOAL_ACHIEVED            // Goal completed
  MILESTONE_UNLOCKED       // Achievement milestone
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
}

model LearningArticle {
  id              String   @id @default(cuid())
  slug            String   @unique  // URL-friendly identifier
  title           String
  subtitle        String?
  category        ArticleCategory
  content         String   @db.Text // Markdown content
  researchCitations String[] // Array of citation strings
  estimatedReadTime Int    // Minutes
  personalizedDataFields String[] // Fields that get injected with user data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  reads           ArticleRead[]

  @@index([category])
  @@map("learning_articles")
}

enum ArticleCategory {
  SPACED_REPETITION     // Ebbinghaus + forgetting curve science
  ACTIVE_RECALL         // Retrieval practice benefits
  LEARNING_STYLES       // VARK with research nuance
  COGNITIVE_LOAD        // Intrinsic vs extrinsic load
  CIRCADIAN_RHYTHMS     // Optimal timing science
}

model ArticleRead {
  id              String         @id @default(cuid())
  userId          String
  articleId       String
  readAt          DateTime       @default(now())
  timeSpentSeconds Int?          // Optional engagement tracking
  completedReading Boolean       @default(false)

  // Relations
  article         LearningArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([articleId])
  @@index([readAt])
  @@map("article_reads")
}

// ============================================
// Story 5.4: Cognitive Load Monitoring and Stress Detection
// ============================================

model CognitiveLoadMetric {
  id               String   @id @default(cuid())
  userId           String
  sessionId        String?
  timestamp        DateTime @default(now())
  loadScore        Float    // 0-100 scale
  stressIndicators Json     // Array of detected stress signals
  confidenceLevel  Float    // 0.0-1.0 based on data quality

  // Relations
  session          StudySession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([sessionId])
  @@index([timestamp])
  @@map("cognitive_load_metrics")
}

model StressResponsePattern {
  id                String   @id @default(cuid())
  userId            String
  patternType       StressPatternType
  triggerConditions Json     // Conditions triggering stress (topic, time, difficulty)
  responseProfile   Json     // How user responds (recoveryTime, impactSeverity)
  detectedAt        DateTime @default(now())
  lastOccurrence    DateTime @default(now())
  frequency         Int      @default(1)
  confidence        Float    @default(0.5) // 0.0-1.0

  @@index([userId])
  @@index([patternType])
  @@map("stress_response_patterns")
}

enum StressPatternType {
  DIFFICULTY_INDUCED    // Triggered by challenging content
  TIME_PRESSURE         // Triggered by deadline proximity
  FATIGUE_BASED         // Triggered by prolonged study
  EXAM_PROXIMITY        // Triggered by upcoming exam
  TOPIC_SPECIFIC        // Triggered by specific subject matter
}

model BurnoutRiskAssessment {
  id                  String   @id @default(cuid())
  userId              String
  assessmentDate      DateTime @default(now())
  riskScore           Float    // 0-100 scale
  riskLevel           BurnoutRiskLevel
  contributingFactors Json     // Array of factors with scores
  recommendations     Json     // Array of intervention recommendations

  @@index([userId])
  @@index([assessmentDate])
  @@map("burnout_risk_assessments")
}

enum BurnoutRiskLevel {
  LOW       // <25
  MEDIUM    // 25-50
  HIGH      // 50-75
  CRITICAL  // >75
}
